#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;
#define setbits __builtin_popcountll

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = LLONG_MAX;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

struct Vertex {
	Vertex *l, *r;
	int val;  //number of occurances of this number
	Vertex(int val)
	{
		this->val = val;
		this->l = NULL;
		this->r = NULL;
	}
	Vertex(Vertex* left, Vertex* right)
	{
		this->val = 0;
		if (left != NULL)
			this->val += left->val;
		if (right != NULL)
			this->val += right->val;
		l = left;
		r = right;
	}
};

Vertex* build(int tl, int tr)
{
	if (tl == tr)
		return new Vertex(0);

	int mid = (tl + tr) / 2;
	return new Vertex(build(tl, mid), build(mid + 1, tr));
}

Vertex* update(Vertex* v, int tl, int tr, int pos)
{
	if (tl == tr)
	{
		return new Vertex(v->val + 1);
	}
	int mid = (tl + tr) / 2;

	if (pos <= mid) {
		Vertex* node =  new Vertex(update(v->l, tl, mid, pos), v->r);
		return node;
	}
	Vertex* node = new Vertex(v->l, update(v->r, mid + 1, tr, pos));
	return node;
}

int find_kth(Vertex* vl, Vertex* vr, int tl, int tr, int k)
{
	if (tl == tr)
		return tl;

	int mid = (tl + tr) / 2;


	int left_count = vr->l->val - vl->l->val;

	if (left_count >= k)
		return find_kth(vl->l, vr->l, tl, mid, k);
	return find_kth(vl->r, vr->r, mid + 1, tr, k - left_count);
}

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	in(n);
	in(q);
	vector<int> v(n);
	set<int> s;
	map<int, int> mapping, revmap;
	for (int i = 0; i < n; i++)
	{
		cin >> v[i];
		s.insert(v[i]);
	}
	int curr = 0;
	for (auto it : s)
	{
		revmap[curr] = it;
		mapping[it] = curr++;
	}


	for (int i = 0; i < n; i++)
	{
		v[i] = mapping[v[i]];
	}

	vector<Vertex*> roots;
	roots.push_back(build(0, curr));

	for (int i = 0; i < n; i++)
	{
		roots.push_back(update(roots.back(), 0, curr, v[i]));
		// cout << endl;
	}

	while (q--)
	{
		in(l); in(r); in(k);
		cout << revmap[find_kth(roots[l - 1], roots[r], 0, curr, k)] << endl;
	}
	return 0;
}
