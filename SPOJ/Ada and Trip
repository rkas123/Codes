#include<bits/stdc++.h>

#define ll long long
#define ld long double

#define pii pair<int,int>
#define vi vector<int> 
#define vvi vector<vi> 
#define vpii vector<pii> 

#define pll pair<ll,ll> 
#define vl vector<ll> 
#define vvl vector<vl> 
#define vpll vector<pll> 

#define inl(x) ll x;cin>>x
#define in(x) int x;cin>>x
#define mk(t,a,n) t*a = new t[n]
#define inp(a,n) for(int i = 0;i<n;i++)cin>>a[i]
#define sea(a,n,v) for(int i = 0;i<n;i++)a[i] = v
#define pb push_back
#define F first
#define S second
#define LEFT 2*I+1
#define RIGHT 2*I+2
#define endl "\n"
#define mii map<int,int>
#define mll map<ll,ll>
#define ub upper_bound
#define lb lower_bound
#define um unordered_map
#define lop(i,n) for(ll i=0;i<n;i++)
#define lop1(i,n) for(ll i=1;i<=n;i++)
#define lopr(i,n) for(ll i=n-1;i>=0;i--)
#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "

const int mod = 1e9+7,MAX = 1e6+5;
const ll inf = 1e18+5;
const double pi = 3.14159265358979323846;

//https://github.com/rkas123/TEMPLATE/blob/master/Template.cpp
//Template taken from here

using namespace std;

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    #ifndef ONLINE_JUDGE
       freopen("input.txt", "r", stdin);
       freopen("output.txt", "w", stdout);
    #endif
    inl(n);inl(m);inl(q);
    vpll adj[n];
    ll mw=0;
    for(int i=0;i<m;i++)
    {
        inl(u);inl(v);inl(w);
        adj[u].pb({v,w});
        adj[v].pb({u,w});
        mw=max(mw,w);
    }
    while(q--)
    {
        inl(src);
        list<ll> dist[10*n];
        vector<pair<ll,list<ll>::iterator>> dis(n);
        for(int i=0;i<n;i++)
            dis[i].F=inf;
        dis[src].F=0;
        dist[0].push_front(src);
        ll curr=0;
        ll h=0;
        ll count=0;
        while(curr<mw*n)
        {
            while(curr<mw*n && dist[curr].size() == 0)
                curr++;
            if(curr==mw*n)
                break;
            ll node=dist[curr].front();
            dist[curr].pop_front();
            for(auto it: adj[node])
            {
                if(dis[it.F].F > dis[node].F + it.S)
                {
                    if(dis[it.F].F!=inf)
                    {
                        dist[dis[it.F].F].erase(dis[it.F].S);
                    }
                    dis[it.F].F=dis[node].F+it.S;
                    dist[dis[it.F].F].push_front(it.F);
                    dis[it.F].second=dist[dis[it.F].F].begin();
                }
            }
        }   
        for(int i=0;i<n;i++)
        {
            if(dis[i].F == inf)
                continue;
            if(dis[i].F == h)
            {
                count++;
            }
            else if(dis[i].F > h)
            {
                h=dis[i].F;
                count=1;
            }
        }
        cout<<h<<" "<<count<<endl;
    }
    
    return 0;   
}
