#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

// #define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = LLONG_MAX;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)
int n;
vector<int> adjlist[20005];
int w[20005];
vector<int> topo;
int indegree[20005];
void topsort(int src, vector<bool>&vis)
{
	stack<int> s;
	for (int i = 1; i <= n; i++)
	{
		if (indegree[i] == 0)
			s.push(i);
	}

	while (!s.empty())
	{
		int curr = s.top();
		topo.pb(curr);
		s.pop();

		for (auto it : adjlist[curr])
		{
			indegree[it]--;
			if (indegree[it] == 0)
				s.push(it);
		}
	}
}

bitset<20005> reach[20005];

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	test()
	{
		cin >> n;
		in(m);
		topo.clear();
		for (int i = 1; i <= n; i++) {
			cin >> w[i];
			adjlist[i].clear();
			reach[i].reset();
			indegree[i] = 0;
		}

		for (int i = 0; i < m; i++)
		{
			in(u); in(v);
			adjlist[u].pb(v);
			indegree[v]++;
		}
		vector<bool> vis(n + 1, false);
		for (int i = 1; i <= n; i++)
		{
			if (!vis[i])
				topsort(i, vis);
		}


		for (int j = topo.size() - 1; j >= 0; j--)
		{
			int it = topo[j];
			for (auto i : adjlist[it])
			{
				reach[it] |= reach[i];
			}
			reach[it].set(it);
		}

		for (int i = 1; i <= n; i++)
		{
			int ans = 0;
			for (int j = 1; j <= n; j++)
			{
				if (reach[i][j])
					ans += w[j];
			}
			cout << ans << " ";
		}
		cout << endl;



	}
	return 0;
}
