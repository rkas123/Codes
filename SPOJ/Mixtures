#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
// #define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

int getSum(vector<int> &v, int l, int r)
{
	int ans = v[r];
	if (l != 0)
		ans -= v[l - 1];
	return ans;
}


int32_t main()
{
// 	ios_base::sync_with_stdio(false);
// 	cin.tie(NULL);
// #ifndef ONLINE_JUDGE
// 	freopen("input.txt", "r", stdin);
// 	freopen("output.txt", "w", stdout);
// #endif

	int n;
	while (scanf("%d", &n) != EOF)
	{
		vector<int> v(n);
		vector<int> cum(n);

		for (int i = 0; i < n; i++)
			cin >> v[i];

		cum[0] = v[0];
		for (int i = 1; i < n; i++)
			cum[i] = cum[i - 1] + v[i];

		vector<vector<int>>dp(n, vector<int>(n, inf));

		for (int i = 0; i < n; i++)
		{
			dp[i][i] = 0;
			for (int j = i - 1; j >= 0; j--) //j to i
			{
				for (int k = j; k < i; k++)
				{
					int pos = dp[j][k] + dp[k + 1][i];
					int a = getSum(cum, j, k) % 100;
					int b = getSum(cum, k + 1, i) % 100;
					pos += (a * b);
					dp[j][i] = min(dp[j][i] , pos);
				}
			}
		}

		cout << dp[0][n - 1] << endl;
	}



	return 0;
}
