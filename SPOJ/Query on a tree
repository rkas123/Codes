#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>
#define vvi vector<vector<int>>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;
#define setbits __builtin_popcountll

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = LLONG_MAX;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)


struct Segment_Tree {
	vector<int> segtree;
	Segment_Tree(int n) {
		segtree = vector<int>(4 * n, 0);
	}
	Segment_Tree(vector<int> &a) {
		int n = a.size();
		segtree = vector<int>(4 * n);
		build(a, 0, n - 1, 1);
	}

	int f(int a, int b) {
		//Just change this for a different segment tree
		return max(a, b);
	}

	void build(vector<int> &a, int s, int e, int root) {
		// base case
		if (s == e) {
			segtree[root] = a[s];
			return;
		}

		int mid = (s + e) / 2;
		build(a, s, mid, 2 * root);
		build(a, mid + 1, e, 2 * root + 1);

		// self work
		segtree[root] = f(segtree[2 * root], segtree[2 * root + 1]);
	}

	void point_update(int s, int e, int root, int idx, int val) {
		// base case
		if (s == e) {
			segtree[root] = val;
			return;
		}

		int mid = (s + e) / 2;
		if (mid >= idx) {
			point_update(s, mid, 2 * root, idx, val);
		}
		else {
			point_update(mid + 1, e, 2 * root + 1, idx, val);
		}

		// self work
		segtree[root] = f(segtree[2 * root], segtree[2 * root + 1]);
	}

	int query(int s, int e, int root, int l, int r) {  //query with root index set to 1
		// completely out of range
		if (s > r || e < l) {
			return -inf;
		}
		// completely in range
		if (s >= l && e <= r) {
			return segtree[root];
		}
		// partial overlap
		int mid = (s + e) / 2;
		int x = query(s, mid, 2 * root, l, r);
		int y = query(mid + 1, e, 2 * root + 1, l, r);
		return f(x, y);
	}
};

int walk(int src, int k, vector<vector<int>>&up)  //walk function to jump k nodes up
{
	int curr = src;
	int i = 0;
	while (k > 0)
	{
		if (k & 1)
			curr = up[curr][i];
		k >>= 1; i++;
		if (curr == -1)break;
	}
	return curr;
}

int lca(int a, int b, vvi &up, vector<int> &height)
{
	int ha = height[a];
	int hb = height[b];
	int diff = abs(ha - hb);

	if (ha > hb) a = walk(a, diff, up);
	else b = walk(b, diff, up);

	if (a == b) return a;

	for (int i = 19; i >= 0; i--)   //fix this value  or update this value
	{
		int pa = walk(a, (1 << i), up);
		int pb = walk(b, (1 << i), up);
		if (pa != pb)
		{
			a = pa; b = pb;
		}
	}
	return up[a][0];
}



int dfs(int src, int par, vvi&adjlist, vector<int>&parent, vector<int>&depth, vector<int>&bigchild)
{
	if (par == -1)
		depth[src] = 0;
	else
		depth[src] = depth[par] + 1;

	parent[src] = par;
	int big = -1;
	int cnt = 1;

	for (auto it : adjlist[src])
	{
		if (it != par)
		{
			int sz = dfs(it, src, adjlist, parent, depth, bigchild);
			if (sz > big)
			{
				big = sz;
				bigchild[src] = it;
			}
			cnt += sz;
		}
	}
	return cnt;
}

void dfs1(int src, int par, vvi & adjlist, vector<int>&bigchild, vector<int>&top, vector<int>&v, int t)
{
	v.pb(src);
	top[src] = t;
	if (bigchild[src] != -1)
		dfs1(bigchild[src], src, adjlist, bigchild, top, v, t);

	for (auto it : adjlist[src])
	{
		if (it != par && it != bigchild[src])
		{
			dfs1(it, src, adjlist, bigchild, top, v, it);
		}
	}
}

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
// #ifndef ONLINE_JUDGE
// 	freopen("input.txt", "r", stdin);
// 	freopen("output.txt", "w", stdout);
// #endif

	test()
	{
		in(n);
		vvi adjlist(n + 1);
		vector<int> val(n + 1, -1);
		vvi edges(n - 1, vector<int>(3));

		for (int i = 0; i < n - 1; i++) {
			for (int j = 0; j < 3; j++)
				cin >> edges[i][j];
			adjlist[edges[i][0]].pb(edges[i][1]);
			adjlist[edges[i][1]].pb(edges[i][0]);
		}
		vvi up(n + 1, vector<int>(20, -1));
		vector<int> parent(n + 1, -1), depth(n + 1), bigchild(n + 1, -1), top(n + 1);
		int temp = dfs(1, -1, adjlist, parent, depth, bigchild);

		for (int i = 1; i <= n; i++)
			up[i][0] = parent[i];

		for (int l = 1; l < 20; l++)       //after setting up[i][0] as the parent of the node
		{
			for (int i = 1; i <= n; i++)
			{
				if (up[i][l - 1] != -1)
				{
					up[i][l] = up[up[i][l - 1]][l - 1];
				}
			}
		}

		for (auto it : edges)
		{
			if (parent[it[0]] == it[1])
				val[it[0]] = it[2];
			else
				val[it[1]] = it[2];
		}

		vector<int> v, pos(n + 1);
		dfs1(1, -1, adjlist, bigchild, top, v, 1);

		for (int i = 0; i < n; i++)
		{
			pos[v[i]] = i;
		}
		for (int i = 0; i < n; i++) v[i] = val[v[i]];

		Segment_Tree segtree(v);

		while (1)
		{
			string s;
			cin >> s;
			if (s == "DONE")
				break;
			if (s == "QUERY")
			{
				in(U); in(V);
				if (depth[U] < depth[V])
					swap(U, V);

				int LCA = lca(U, V, up, depth);
				int ans = 0;
				int diff = depth[U] - depth[LCA];

				int u = walk(U, diff - 1, up);
				int v = U;
				while (1)
				{

					int pu = top[u];
					int pv = top[v];

					if (pu == pv)
					{
						ans = max(ans, segtree.query(0, n - 1, 1, min(pos[u], pos[v]), max(pos[u], pos[v])));
						break;
					}
					if (depth[pu] > depth[pv])
					{
						ans = max(ans, segtree.query(0, n - 1, 1, pos[pu], pos[u]));
						u = parent[pu];
					}
					else
					{
						ans = max(ans, segtree.query(0, n - 1, 1, pos[pv], pos[v]));
						v = parent[pv];
					}
				}

				if (LCA == V)
				{
					cout << ans << endl;
					continue;
				}

				diff = depth[V] - depth[LCA];
				u = walk(V, diff - 1, up);
				v = V;
				while (1)
				{
					int pu = top[u];
					int pv = top[v];

					if (pu == pv)
					{
						ans = max(ans, segtree.query(0, n - 1, 1, min(pos[u], pos[v]), max(pos[u], pos[v])));
						break;
					}
					if (depth[pu] > depth[pv])
					{
						ans = max(ans, segtree.query(0, n - 1, 1, pos[pu], pos[u]));
						u = parent[pu];
					}
					else
					{
						ans = max(ans, segtree.query(0, n - 1, 1, pos[pv], pos[v]));
						v = parent[pv];
					}
				}
				cout << ans << endl;
			}
			else
			{
				in(index); in(newval);
				index--;
				int u = edges[index][0];
				int v = edges[index][1];

				if (parent[u] == v) {
					segtree.point_update(0, n - 1, 1, pos[u], newval);
				}
				else {
					segtree.point_update(0, n - 1, 1, pos[v], newval);
				}
			}
		}
	}

	return 0;
}
