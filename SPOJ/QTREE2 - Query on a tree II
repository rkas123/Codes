#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>
#define vvi vector<vector<int>>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;
#define setbits __builtin_popcountll

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = LLONG_MAX;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

void dfs(int src, int par, vector<vector<pll>> &adjlist, vector<int>&height, vvi &up, vvi&dp)
{
	if (src == 1) height[src] = 0;
	else height[src] = height[par] + 1;

	up[src][0] = par;

	for (auto it : adjlist[src])
	{
		if (it.F != par) dfs(it.F, src, adjlist, height, up, dp);
		else dp[src][0] = it.S;
	}
}

int walk(int src, int k, vector<vector<int>>&up)  //walk function to jump k nodes up
{
	int curr = src;
	int i = 0;
	while (k > 0)
	{
		if (k & 1)
			curr = up[curr][i];
		k >>= 1; i++;
		if (curr == -1)break;
	}
	return curr;
}

int lca(int a, int b, vvi &up, vector<int> &height)
{
	int ha = height[a];
	int hb = height[b];
	int diff = abs(ha - hb);

	if (ha > hb) a = walk(a, diff, up);
	else b = walk(b, diff, up);

	if (a == b) return a;

	for (int i = 13; i >= 0; i--)
	{
		int pa = walk(a, (1 << i), up);
		int pb = walk(b, (1 << i), up);
		if (pa != pb)
		{
			a = pa; b = pb;
		}
	}
	return up[a][0];
}

int query(int a, int k, vvi&dp, vvi&up)
{
	int ans = 0;
	int i = 0;
	while (k > 0)
	{
		if (k & 1)
		{
			ans += dp[a][i];
			a = up[a][i];
		}
		k >>= 1; i++;
	}
	return ans;
}

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	test()
	{
		in(n);
		vector<vector<pll>> adjlist(n + 1);
		for (int i = 1; i < n; i++)
		{
			in(u); in(v); in(c);
			adjlist[u].pb({v, c});
			adjlist[v].pb({u, c});
		}

		vector<int> height(n + 1);
		vvi up(n + 1, vector<int>(14, -1));
		vvi dp(n + 1, vector<int>(14, -1));

		dfs(1, -1, adjlist, height, up, dp);

		for (int l = 1; l < 14; l++)
		{
			for (int i = 1; i <= n; i++) {
				if (up[i][l - 1] != -1) {
					up[i][l] = up[up[i][l - 1]][l - 1];
					dp[i][l] = dp[up[i][l - 1]][l - 1] + dp[i][l - 1];
				}
			}
		}

		while (1)
		{
			string s;
			cin >> s;
			if (s == "DONE")
				break;
			if (s == "DIST")
			{
				in(a); in(b);
				int LCA = lca(a, b, up, height);
				cout << query(a, height[a] - height[LCA], dp, up) + query(b, height[b] - height[LCA], dp, up) << endl;
			}
			else
			{
				in(a); in(b); in(c);
				c--;
				int LCA = lca(a, b, up, height);
				int la = height[a] - height[LCA];
				int lb = height[b] - height[LCA];

				if (c < la)
					cout << walk(a, c, up) << endl;
				else
					cout << walk(b, lb - (c - la), up) << endl;
			}
		}


	}
	return 0;
}
