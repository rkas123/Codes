#include<bits/stdc++.h>

#define ll long long
#define pii pair<int,int>
#define pll pair<long long,long long>

#define inl(x) long long x;cin>>x
#define in(x) int x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"
#define segleft 2*index+1
#define segright 2*index+2

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "

const long long mod = 1e9+7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846; 

int dirX[]={1,-1,0,0};
int dirY[]={0,0,1,-1};

using namespace std;
void update(ll*tree,int index,int s,int e,int qs,int qe,ll val)
{
	if(s>e)
		return;
	if(s>qe || e<qs)
		return;
	if(s>=qs && e<=qe)
	{
		tree[index]=max(tree[index],val);
		return;
	}
	int mid=(s+e)/2;
	update(tree,segleft,s,mid,qs,qe,val);
	update(tree,segright,mid+1,e,qs,qe,val);
}
ll query(ll* tree,int index,int s,int e,int i)
{
	if(s>e)
		return 0;
	if(i>e || i<s)
		return 0;
	if(s==e)
	{
		return tree[index];
	}
	int mid=(s+e)/2;
	ll ans=tree[index];
	ans=max(ans,query(tree,segleft,s,mid,i));
	ans=max(ans,query(tree,segright,mid+1,e,i));
	return ans;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    #ifndef ONLINE_JUDGE
      freopen("input.txt", "r", stdin);
      freopen("output.txt", "w", stdout);
    #endif
	in(n);in(m);
	int size=1;
	while(size<n)
		size*=2;
	int treesize=size*2;
	ll tree[treesize];
	for(int i=0;i<treesize;i++)
		tree[i]=0;
	while(m--)
	{
		in(t);
		if(t==1)
		{
			in(l);in(r);inl(val);
			update(tree,0,0,size-1,l,r-1,val);
		}
		else
		{
			in(i);
			cout<<query(tree,0,0,size-1,i)<<endl;
		}
	}
    return 0;
}
