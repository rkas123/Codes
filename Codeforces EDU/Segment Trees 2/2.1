#include<bits/stdc++.h>

#define ll long long
#define pii pair<int,int>
#define pll pair<long long,long long>

#define inl(x) long long x;cin>>x
#define in(x) int x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"
#define segleft 2*index+1
#define segright 2*index+2

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "

const long long mod = 1e9+7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846; 

int dirX[]={1,-1,0,0};
int dirY[]={0,0,1,-1};

using namespace std;
void update(ll*tree,ll*mins,int index,int s,int e,int l,int r,ll val)
{
	if(s>e)
		return;
	if(s>r || e<l)
		return;
	if(s>=l && e<=r)
	{
		tree[index]+=val;
		mins[index]+=val;
		return;
	}
	int mid=(s+e)/2;
	update(tree,mins,segleft,s,mid,l,r,val);
	update(tree,mins,segright,mid+1,e,l,r,val);
	mins[index]=min(mins[segleft],mins[segright])+tree[index];
}
ll query(ll*tree,ll*mins,int index,int s,int e,int l,int r)
{
	if(s>e)
		return inf;
	if(l>e || r<s)
		return inf;
	if(s>=l && e<=r)
		return mins[index];
	int mid=(s+e)/2;
	ll a1=query(tree,mins,segleft,s,mid,l,r);
	ll a2=query(tree,mins,segright,mid+1,e,l,r);
	return min(a1,a2)+tree[index];
	
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    #ifndef ONLINE_JUDGE
      freopen("input.txt", "r", stdin);
      freopen("output.txt", "w", stdout);
    #endif
	int n;
	cin>>n;
	in(m);
	int size=1;
	while(size<n)
	{
		size*=2;
	}
	int treesize=size*2;
	ll tree[treesize];
	ll mins[treesize];
	for(int i=0;i<treesize;i++)
	{
		tree[i]=0;
		mins[i]=0;
	}
	while(m--)
	{
		in(t);
		if(t==1)
		{
			in(l);in(r);inl(val);
			update(tree,mins,0,0,size-1,l,r-1,val);
		}
		else
		{
			in(l);in(r);
			cout<<query(tree,mins,0,0,size-1,l,r-1)<<endl;
		}
	}
    return 0;
}
