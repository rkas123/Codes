#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>
#define vvi vector<vector<int>>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;
#define setbits __builtin_popcountll

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = LLONG_MAX;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	in(n); in(m);
	vvi adjlist(n + 1);

	vector<int> indegree(n + 1, 0), outdegree(n + 1);
	for (int i = 0; i < m; i++)
	{
		in(a); in(b);
		adjlist[a].pb(b);
		outdegree[a]++;
		indegree[b]++;
	}

	bool pos = true;
	for (int i = 1; i <= n; i++)
	{
		if (indegree[i] == outdegree[i] + 1)
		{
			if (i != n)
				pos = false;
		}
		else if (indegree[i] + 1 == outdegree[i])
		{
			if (i != 1)
				pos = false;
		}
		else if (indegree[i] != outdegree[i])
		{
			pos = false;
		}
	}
	if (indegree[1] != outdegree[1] - 1) pos = false;
	if (indegree[n] != outdegree[n] + 1) pos = false;
	if (!pos)
	{
		cout << "IMPOSSIBLE" << endl;
		return 0;
	}

	stack<int> s;
	s.push(1);

	vector<int> ans;

	while (!s.empty())
	{
		int node = s.top();
		if (outdegree[node] == 0) {
			ans.pb(node);
			s.pop();
			continue;
		}

		s.push(adjlist[node][outdegree[node] - 1]);
		outdegree[node]--;
	}

	if (ans.size() != m + 1)
	{
		cout << "IMPOSSIBLE" << endl;
	}
	else
	{
		reverse(ans.begin(), ans.end());
		for (auto it : ans)
			cout << it << " ";
		cout << endl;
	}

	return 0;
}
