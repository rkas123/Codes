#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)


struct Segment_Tree {
	vector<int> segtree;
	Segment_Tree(int n) {
		segtree = vector<int>(4 * n, 0);
	}
	Segment_Tree(vector<int> &a) {
		int n = a.size();
		segtree = vector<int>(4 * n);
		build(a, 0, n - 1, 1);
	}

	int f(int a, int b) {
		//Just change this for a different segment tree
		return a + b;
	}

	void build(vector<int> &a, int s, int e, int root) {
		// base case
		if (s == e) {
			segtree[root] = a[s];
			return;
		}

		int mid = (s + e) / 2;
		build(a, s, mid, 2 * root);
		build(a, mid + 1, e, 2 * root + 1);

		// self work
		segtree[root] = f(segtree[2 * root], segtree[2 * root + 1]);
	}

	void point_update(int s, int e, int root, int idx, int val) {
		// base case
		if (s == e) {
			segtree[root] = val;
			return;
		}

		int mid = (s + e) / 2;
		if (mid >= idx) {
			point_update(s, mid, 2 * root, idx, val);
		}
		else {
			point_update(mid + 1, e, 2 * root + 1, idx, val);
		}

		// self work
		segtree[root] = f(segtree[2 * root], segtree[2 * root + 1]);
	}

	void point_update(vector<int> &a, int s, int e, int root, int idx, int val) {
		// base case
		if (s == e) {
			segtree[root] = val;
			a[idx] = val;
			return;
		}

		int mid = (s + e) / 2;
		if (mid >= idx) {
			point_update(a, s, mid, 2 * root, idx, val);
		}
		else {
			point_update(a, mid + 1, e, 2 * root + 1, idx, val);
		}

		// self work
		segtree[root] = f(segtree[2 * root], segtree[2 * root + 1]);
	}

	void point_update(int a[], int s, int e, int root, int idx, int val) {
		// base case
		if (s == e) {
			segtree[root] = val;
			a[idx] = val;
			return;
		}

		int mid = (s + e) / 2;
		if (mid >= idx) {
			point_update(a, s, mid, 2 * root, idx, val);
		}
		else {
			point_update(a, mid + 1, e, 2 * root + 1, idx, val);
		}

		// self work
		segtree[root] = f(segtree[2 * root], segtree[2 * root + 1]);
	}

	int query(int s, int e, int root, int l, int r) {  //query with root index set to 1
		// completely out of range
		if (s > r || e < l) {
			return 0;
		}
		// completely in range
		if (s >= l && e <= r) {
			return segtree[root];
		}
		// partial overlap
		int mid = (s + e) / 2;
		int x = query(s, mid, 2 * root, l, r);
		int y = query(mid + 1, e, 2 * root + 1, l, r);
		return f(x, y);
	}
};

int in[200005];
int en[200005];
int iter = 0;
vector<int> dfstree;

void dfs(int src, vector<vector<int>>&adjlist, vector<bool>&vis)
{
	dfstree.pb(src);
	in[src] = iter;
	iter++;
	vis[src] = true;
	for (auto it : adjlist[src])
	{
		if (!vis[it])
		{
			dfs(it, adjlist, vis);
		}
	}
	en[src] = iter - 1;
}
int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	in(n);
	vector<int> v(n);
	vector<vector<int>> adjlist(n);
	for (int i = 0; i < n; i++)
		cin >> v[i];

	for (int i = 0; i < n - 1; i++) {
		in(u); in(v);
		u--; v--;
		adjlist[u].pb(v);
		adjlist[v].pb(u);
	}
	vector<bool> vis(n, false);
	dfs(0, adjlist, vis);

	for (int i = 0; i < n; i++)
		dfstree[i] = v[dfstree[i]];

	vector<pll> queries[n];

	for (int i = 0; i < n; i++) {
		queries[in[i]].pb({en[i], i});
		// cout << in[i] << " " << en[i] << endl;
	}

	Segment_Tree stree(n);
	vector<int> ans(n);
	map<int, int> indexes;
	for (int i = n - 1; i >= 0; i--)
	{
		if (indexes.count(dfstree[i]) != 0) {
			stree.point_update(0, n - 1, 1, indexes[dfstree[i]], 0);
		}
		indexes[dfstree[i]] = i;
		stree.point_update(0, n - 1, 1, i, 1);
		for (auto it : queries[i])
		{
			ans[it.S] = stree.query(0, n - 1, 1, i, it.F);
		}
	}

	for (auto it : ans)
		cout << it << " ";
	cout << endl;

	return 0;
}
