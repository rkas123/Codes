#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)


int first[200005], second[200005], ans[200005];
vector<int> adjlist[200005];

void dfs(int src, int par)
{
	for (auto it : adjlist[src])
	{
		if (it != par)
		{
			dfs(it, src);
			if (first[it] + 1 > first[src])			//if the answer for this node is optimal
			{
				second[src] = first[src];			//replace second with first and update first
				first[src] = first[it] + 1;
			}
			else if (first[it] + 1 > second[src])
				second[src] = first[it] + 1;
		}
	}
}

void dfs1(int src, int par, int parans)				//funcion to incorporate parent links
{
	ans[src] = max(parans, first[src]);				//if link from parent gives better answer

	for (auto it : adjlist[src])
	{
		if (it == par)
			continue;
		if (first[it] + 1 == first[src])			//if the optimal for the current node comes from this child
			dfs1(it, src, max(second[src], parans) + 1);	//optimal via parent = second best of parent or link to parent of parent
		else
			dfs1(it, src, ans[src] + 1);			//if the optimal of parent is from another node, the the link of parent in optimal of parent
	}
}
int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	in(n);
	for (int i = 1; i < n; i++)
	{
		in(a); in(b);
		adjlist[a].pb(b);
		adjlist[b].pb(a);
	}
	memset(first, 0, sizeof first);
	memset(second, 0, sizeof second);
	memset(ans, 0, sizeof ans);

	dfs(1, -1);
	dfs1(1, -1, 0);

	for (int i = 1; i <= n; i++)
		cout << ans[i] << " ";
	cout << endl;
	return 0;
}
