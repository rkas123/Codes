#include<bits/stdc++.h>

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
map<int, vector<int>> adjlist;
map<int, bool> vis;
map<int, int> indegree;
map<int, int> ways;
map<int, vector<int>> Reverse;

void dfs(int src)
{
	vis[src] = true;
	for (auto it : adjlist[src])
	{
		indegree[it]++;
		if (!vis[it])
			dfs(it);
	}
}
int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	in(n); in(m);
	for (int i = 0; i < m; i++) {
		in(a); in(b);
		adjlist[a].pb(b);
		Reverse[b].pb(a);
	}
	for (int i = 1; i <= n; i++)
	{
		ways[i] = 0;
	}
	ways[1] = 1;
	dfs(1);
	queue<int> q;
	q.push(1);
	while (!q.empty())
	{
		int node = q.front();
		q.pop();
		int temp = 0;
		for (auto it : Reverse[node]) {
			temp += ways[it];
			temp %= mod;
		}
		for (auto it : adjlist[node])
		{
			indegree[it]--;
			if (indegree[it] == 0)
			{
				q.push(it);
			}
		}
		if (node != 1)
			ways[node] = temp;
	}
	cout << ways[n] << endl;
	return 0;
}
