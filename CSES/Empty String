#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0
int fastexp(int a, int b)
{
	int ans = 1;
	int temp = a;
	while (b > 0)
	{
		if (b & 1)
			ans = (ans * temp) % mod;
		temp = (temp * temp) % mod;
		b >>= 1;
	}
	return ans;
}
int factorial[100005];
int invfact[100005];
int N = 100005;
void pre()
{
	factorial[0] = 1ll;
	for (int i = 1ll; i < N; i++)
	{
		factorial[i] = (factorial[i - 1] * i) % mod;
	}

	invfact[N - 1] = fastexp(factorial[N - 1], mod - 2);
	for (int i = N - 2; i >= 0; i--)
	{
		invfact[i] = invfact[i + 1] * (i + 1);
		invfact[i] %= mod;
	}

}

int ncr(int n, int r)
{
	if (r > n)
		return 0ll;
	int num = factorial[n];
	num *= invfact[r];
	num %= mod;
	num *= invfact[n - r];
	num %= mod;
	return num;
}
int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	pre();
	string s;
	cin >> s;

	int n = s.length();

	int dp[n][n];

	memset(dp, 0, sizeof(dp));

	for (int j = 0; j < n; j++)
	{
		if (j - 1 >= 0 && s[j] == s[j - 1])
			dp[j - 1][j] = 1;
		for (int i = j - 3; i >= 0; i -= 2)
		{
			for (int k = j; k >= i + 1; k -= 2)
			{
				if (s[i] == s[k])
				{
					int left = (k - i + 1) / 2;
					int right = (j - k) / 2;
					int moves = ncr(left + right, left);
					if (i + 1 <= k - 1)
						moves *= dp[i + 1][k - 1];
					moves %= mod;
					if (k + 1 <= j)
						moves *= dp[k + 1][j];
					moves %= mod;
					dp[i][j] += moves;
					dp[i][j] %= mod;
				}
			}
		}
	}
	cout << dp[0][n - 1] << endl;

	return 0;
}
