#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;
#define setbits __builtin_popcountll

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = LLONG_MAX;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)


struct Data {
	int sum;
	Data()
	{
		sum = 0;
	}
	Data(int n)
	{
		sum = n;
	}
};


struct Segment_Tree {
	vector<Data> segtree;
	vector<int> lazy1, lazy2;
	Segment_Tree(int n) {
		segtree = vector<Data>(4 * n);
	}
	Segment_Tree(vector<int> &a) {
		int n = a.size();
		segtree = vector<Data>(4 * n);
		lazy1 = vector<int>(4 * n, 0);
		lazy2 = vector<int>(4 * n, 0);
		build(a, 0, n - 1, 1);
	}



	void propagate(int root, int s, int e)
	{
		if (lazy1[root] != 0)
		{
			int width = (e - s + 1);
			segtree[root].sum += (width * lazy1[root]);
			if (s != e)
			{
				if (lazy2[2 * root] != 0)
				{
					lazy2[2 * root] += lazy1[root];
				}
				else
				{
					lazy1[2 * root] += lazy1[root];
				}

				if (lazy2[2 * root + 1] != 0)
				{
					lazy2[2 * root + 1] += lazy1[root];
				}
				else
				{
					lazy1[2 * root + 1] += lazy1[root];
				}
			}
		}
		if (lazy2[root] != 0)
		{
			int width = (e - s + 1);
			segtree[root].sum = (width * lazy2[root]);

			if (s != e)
			{
				if (lazy2[2 * root] != 0)
					lazy2[2 * root] = lazy2[root];
				else {
					lazy2[2 * root] = lazy2[root];
					lazy1[2 * root] = 0;
				}

				if (lazy2[2 * root + 1] != 0)
					lazy2[2 * root + 1] = lazy2[root];
				else {
					lazy2[2 * root + 1] = lazy2[root];
					lazy1[2 * root + 1] = 0;
				}
			}
		}
		lazy1[root] = 0;
		lazy2[root] = 0;
	}




	Data f(Data a, Data b) {
		//Just change this for a different segment tree
		return Data(a.sum + b.sum);
	}

	void build(vector<int> &a, int s, int e, int root) {
		// base case
		if (s == e) {
			segtree[root] = Data(a[s]);
			return;
		}

		int mid = (s + e) / 2;
		build(a, s, mid, 2 * root);
		build(a, mid + 1, e, 2 * root + 1);

		// self work
		segtree[root] = f(segtree[2 * root], segtree[2 * root + 1]);
	}

	void rupd(int s, int e, int root, int l, int r, int val)
	{
		propagate(root, s, e);

		if (s > r || e < l)
			return;

		if (s >= l && e <= r)
		{
			//make updates in the current node
			int width = (e - s + 1);
			segtree[root].sum += (width * val);

			if (s != e) //lazy updates
			{
				if (lazy2[2 * root] != 0)
				{
					lazy2[2 * root] += val;
				}
				else
				{
					lazy1[2 * root] += val;
				}

				if (lazy2[2 * root + 1] != 0)
				{
					lazy2[2 * root + 1] += val;
				}
				else
				{
					lazy1[2 * root + 1] += val;
				}
			}
			return;
		}

		int mid = (s + e) / 2;

		rupd(s, mid, 2 * root, l, r, val);
		rupd(mid + 1, e, 2 * root + 1, l, r, val);
		segtree[root] = f(segtree[2 * root], segtree[2 * root + 1]);
	}

	void rupd1(int s, int e, int root, int l, int r, int val)
	{
		propagate(root, s, e);

		if (s > r || e < l)
			return;

		if (s >= l && e <= r)
		{
			int width = (e - s + 1);
			segtree[root].sum = (width * val);
			if (s != e) //lazy updates
			{
				if (lazy2[2 * root] != 0)
				{
					lazy2[2 * root] = val;
				}
				else
				{
					lazy1[2 * root] = 0;
					lazy2[2 * root] = val;
				}

				if (lazy2[2 * root + 1] != 0)
				{
					lazy2[2 * root + 1] = val;
				}
				else
				{
					lazy1[2 * root + 1] = 0;
					lazy2[2 * root + 1] = val;
				}
			}
			return;
		}

		int mid = (s + e) / 2;
		rupd1(s, mid, 2 * root, l, r, val);
		rupd1(mid + 1, e, 2 * root + 1, l, r, val);
		segtree[root] = f(segtree[2 * root], segtree[2 * root + 1]);
	}

	Data query(int s, int e, int root, int l, int r) {  //query with root index set to 1
		// completely out of range
		propagate(root, s, e);
		if (s > r || e < l) {
			return Data(0);
		}
		// completely in range
		if (s >= l && e <= r) {
			return segtree[root];
		}
		// partial overlap
		int mid = (s + e) / 2;
		Data x = query(s, mid, 2 * root, l, r);
		Data y = query(mid + 1, e, 2 * root + 1, l, r);
		return f(x, y);
	}
};


int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	in(n); in(q);
	vector<int> v(n);

	for (int i = 0; i < n; i++)
		cin >> v[i];

	Segment_Tree segtree(v);

	while (q--)
	{
		in(t);

		if (t == 1)
		{
			in(a); in(b); in(x);
			segtree.rupd(0, n - 1, 1, a - 1, b - 1, x);
		}
		else if (t == 2)
		{
			in(a); in(b); in(x);
			segtree.rupd1(0, n - 1, 1, a - 1, b - 1, x);
		}
		else
		{
			in(a); in(b);
			cout << segtree.query(0, n - 1, 1, a - 1, b - 1).sum << endl;
		}
	}
	return 0;
}
