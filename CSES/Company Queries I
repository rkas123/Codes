#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;
#define setbits __builtin_popcountll

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = LLONG_MAX;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

int walk(int src, int k, vector<vector<int>>&up)
{
	int curr = src;

	int i = 0;
	while (k > 0)
	{
		if (k & 1)
		{
			curr = up[curr][i];
		}
		k >>= 1;
		i++;
		if (curr == -1)
			break;
	}
	return curr;
}

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	in(n); in(q);
	vector<int> p(n + 1);
	for (int i = 2; i <= n; i++)
		cin >> p[i];

	vector<vector<int>> up(n + 1, vector<int>(21, -1));

	for (int i = 2; i <= n; i++)
	{
		up[i][0] = p[i];
	}

	for (int l = 1; l < 21; l++)
	{
		for (int i = 1; i <= n; i++)
		{
			if (up[i][l - 1] != -1)
			{
				up[i][l] = up[up[i][l - 1]][l - 1];
			}
		}
	}

	while (q--)
	{
		in(a); in(b);
		cout << walk(a, b, up) << endl;
	}


	return 0;
}
