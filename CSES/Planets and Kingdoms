#include<bits/stdc++.h>

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"
#define segleft 2*index+1
#define segright 2*index+2

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
vector<int> adjlist[100005], complement[100005];
bool vis[100001];
int ans[100005];
stack<int> s;
int ount = 1;

void dfs(int src)
{
	vis[src] = true;
	for (auto it : adjlist[src])
	{
		if (!vis[it])
			dfs(it);
	}
	s.push(src);
}
void dfs2(int src)
{
	vis[src] = true;
	ans[src] = ount;
	for (auto it : complement[src])
	{
		if (!vis[it])
			dfs2(it);
	}
}
int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
// #ifndef ONLINE_JUDGE
// 	freopen("input.txt", "r", stdin);
// 	freopen("output.txt", "w", stdout);
// #endif
	in(n); in(m);
	for (int i = 0; i < m; i++)
	{
		in(a); in(b);
		adjlist[a].pb(b);
		complement[b].pb(a);
	}
	for (int i = 1; i <= n; i++)
		vis[i] = false;
	for (int i = 1; i <= n; i++)
	{
		if (!vis[i])
			dfs(i);
	}
	for (int i = 1; i <= n; i++)
		vis[i] = false;
	while (!s.empty())
	{
		int node = s.top();
		s.pop();
		if (!vis[node])
		{
			dfs2(node);
			ount++;
		}
	}
	cout << ount - 1 << endl;
	for (int i = 1; i <= n; i++)
		cout << ans[i] << " ";
	cout << endl;
	return 0;
}
