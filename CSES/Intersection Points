#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;
#define setbits __builtin_popcountll

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = LLONG_MAX;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)


struct BIT {
	vector<int> bit;
	int n;
	BIT(int n)
	{
		this-> n = n + 1;
		bit = vector<int>(n + 1, 0);
	}
	void update(int index, int val)
	{
		for (; index < n; index += (index & (-index)))
		{
			bit[index] += val;
		}
	}
	int query(int index)
	{
		int ans = 0;

		for (; index > 0; index -= (index & (-index)))
		{
			ans += bit[index];
		}
		return ans;
	}
};

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	in(n);
	vector<vector<int>> v(n, vector<int>(4));

	//LOGIC
	//store the points as events
	//sweep through the y coordinates and count intersection of horizontal with vertical by storing the x coordinates of vertical in a BIT
	//when find a horizontal the simple sum operation in BIT
	for (int i = 0; i < n; i++)
	{
		in(x1); in(y1); in(x2); in(y2);
		int add = 1e6 + 1;
		x1 += add;
		y1 += add;
		x2 += add;
		y2 += add;

		if (x1 == x2)
		{
			v.pb({y1, 1, x1, x2});
			v.pb({y2, -1, x1, x2});
		}
		else
		{
			v.pb({y1, y2, x1, x2});
		}
	}


	sort(v.begin(), v.end());

	int ans = 0;

	BIT bit(2000005);
	for (auto it : v)
	{
		if (it[0] == it[1]) //horizontal
		{
			int inter = bit.query(it[3]);
			inter -= bit.query(it[2]);
			ans += inter;
		}
		else	//vertical
		{
			bit.update(it[2], it[1]);
		}
	}

	cout << ans << endl;


	return 0;
}
