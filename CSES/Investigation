#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)
class node {
public:
	int val;
	int dist;
	int minsteps;
	int maxsteps;
	int ways;
	vector<pll> adjlist;
	node(int val)
	{
		this-> val = val;
		this-> dist = inf;
		this-> minsteps = inf;
		this-> maxsteps = 0;
		this->ways = 1;
		this->adjlist.clear();
	}
};
int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	in(n); in(m);
	vector<node> nodes;

	for (int i = 0; i < n; i++)
	{
		nodes.pb(node(i));
	}

	for (int i = 0; i < m; i++)
	{
		in(a); in(b); in(c);
		a--; b--;
		nodes[a].adjlist.pb({b, c});
	}



	nodes[0].dist = 0;
	nodes[0].minsteps = 0;
	nodes[0].maxsteps = 0;

	priority_queue<pll, vector<pll>, greater<pll>> pq;
	pq.push({0, 0});
	vector<bool> vis(n, false);

	while (!pq.empty())
	{
		pll P = pq.top();
		pq.pop();
		if (vis[P.S])
			continue;
		vis[P.S] = true;

		for (auto it : nodes[P.S].adjlist)
		{
			if (nodes[it.F].dist > it.S + nodes[P.S].dist)
			{
				nodes[it.F].dist = it.S + nodes[P.S].dist;
				nodes[it.F].ways = nodes[P.S].ways;
				nodes[it.F].minsteps = nodes[P.S].minsteps + 1;
				nodes[it.F].maxsteps = nodes[P.S].maxsteps + 1;
				pq.push({it.S + nodes[P.S].dist, it.F});
			}
			else if (nodes[it.F].dist == it.S + nodes[P.S].dist)
			{
				nodes[it.F].ways += nodes[P.S].ways;
				nodes[it.F].ways %= mod;
				nodes[it.F].minsteps = min(nodes[it.F].minsteps, nodes[P.S].minsteps + 1);
				nodes[it.F].maxsteps = max(nodes[it.F].maxsteps, nodes[P.S].maxsteps + 1);
			}
		}
	}

	cout << nodes[n - 1].dist << " " << nodes[n - 1].ways << " " << nodes[n - 1].minsteps << " " << nodes[n - 1].maxsteps << endl;

	return 0;
}
