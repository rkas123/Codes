#include<bits/stdc++.h>

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"
#define segleft 2*index+1
#define segright 2*index+2

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
int fastexp(int a, int b)
{
	int ans = 1;
	int temp = a;
	while (b > 0)
	{
		if (b & 1)
			ans = (ans * temp) % mod;
		temp = (temp * temp) % mod;
		b >>= 1;
	}
	return ans;
}
int32_t main()
{
	in(n);
	int sum = (n * (n + 1)) / 2;
	if (sum % 2 != 0)
	{
		cout << "0" << endl;
		return 0;
	}
	int upper = sum / 2;
	int dp[n + 1][upper + 1];
	for (int i = 0; i <= n; i++)
	{
		for (int j = 0; j <= upper; j++)
			dp[i][j] = 0;
	}
	for (int i = 0; i <= n; i++)
		dp[i][0] = 1;

	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= upper; j++)
		{
			dp[i][j] = dp[i - 1][j];
			int prev = j - i;
			if (prev >= 0)
			{
				dp[i][j] = (dp[i][j] + dp[i - 1][prev]) % mod;
			}
		}
	}
	int modInv = fastexp(2, mod - 2);
	int ans = (dp[n][upper] * modInv) % mod;
	cout << ans << endl;
	return 0;
}
