class Con
{
    public:
        int sum;
        int l;
        int r;
        Con(int sum,int l,int r)
        {
            this->sum = sum;
            this->l = l;
            this->r = r;
        }
};


class cmp
{
    public:
    bool operator()(Con a,Con b)
    {
        return a.sum > b.sum;
    }
};

class Solution {
public:
    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        priority_queue<Con,vector<Con>,cmp> pq;
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());
        
        int n1=nums1.size();
        int n2=nums2.size();
        
        Con temp(nums1[0]+nums2[0],0,0);
        
        pq.push(temp);
        
        vector<vector<int>> ans;
        set<pair<int,int>> vis;
        
        vis.insert({0,0});

        
        while(ans.size() < k && !pq.empty())
        {
            Con node = pq.top();
            pq.pop();

            int l = node.l;
            int r = node.r;
            
            ans.push_back({nums1[l],nums2[r]});
            
            if(l+1 < n1 && r<n2 && vis.find({l+1,r}) == vis.end())
            {
                Con temp(nums1[l+1]+nums2[r],l+1,r);
                pq.push(temp);
                vis.insert({l+1,r});
            }
            
            if(l<n1 && r+1<n2 && vis.find({l,r+1}) == vis.end())
            {
                Con temp(nums1[l]+nums2[r+1],l,r+1);
                pq.push(temp);
                vis.insert({l,r+1});
            }
        }
        return ans;
    }
};
