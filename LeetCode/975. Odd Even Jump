class Solution {
public:
    void dfs(int src,vector<vector<int>> &adjlist,vector<vector<int>>&adjlist2,vector<bool> &vis,vector<bool> &vis2,int type)
    {
        if(type == 1)
            vis[src]= true;
        else
            vis2[src]=true;
        if(type==1)
        {
            for(auto it: adjlist[src])
            {
                if(!vis2[it])
                {
                    dfs(it,adjlist,adjlist2,vis,vis2,(type+1)%2);
                }
            }
        }
        else
        {
            for(auto it: adjlist2[src])
            {
                if(!vis[it])
                {
                    dfs(it,adjlist,adjlist2,vis,vis2,(type+1)%2);
                }
            }
        }
       
    }
    int oddEvenJumps(vector<int>& arr) {
        int n = arr.size();
        
        vector<vector<int>> adjlist(n);
        vector<vector<int>> adjlist2(n);
        
        
        set<pair<int,int>> s;
        for(int i =n-1;i>=0;i--)
        {
            auto it = s.lower_bound({arr[i],0});
            if(it!=s.end())
            {
                adjlist[it->second].push_back(i);
            }
            s.insert({arr[i],i});
        }
        
        map<int,int>indexes;
        set<int> S;
        for(int i=n-1;i>=0;i--)
        {
            auto it = S.lower_bound(arr[i]);
            if(*it == arr[i])
            {
                adjlist2[indexes[*it]].push_back(i);
            }
            else if(it != S.begin())
            {
                it=prev(it);
                adjlist2[indexes[*it]].push_back(i);
            }
            S.insert(arr[i]);
            indexes[arr[i]]=i;
        }
        
    
       
        
        vector<bool> vis(n,0);
        vector<bool> vis1(n,0);
        int ans=0;
        dfs(n-1,adjlist,adjlist2,vis,vis1,0);
        dfs(n-1,adjlist,adjlist2,vis,vis1,1);
        for(int i=0;i<n;i++)
        {
            if(vis1[i])
                ans++;
        }
        return ans;
        
    }
};
