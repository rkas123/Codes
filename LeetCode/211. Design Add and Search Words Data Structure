class Node{
    public: 
    char ch;
    Node* children[26];
    bool terminal;
    Node(char ch)
    {
        this->terminal =false;
        this->ch =ch;
        for(int i=0;i<26;i++)
        {
            this->children[i]=NULL;
        }
    }
};
class Trie{
  public:
  Node* root;
  Trie()
  {
    this->root = new Node('\0');
  }
  void insert(string s)
  {
     Node* temp = root;
      for(int i=0;i<s.length();i++)
      {
          int index = s[i] -'a';
          if(temp->children[index] == NULL)
          {
              temp->children[index] = new Node('a'+index);
          }
          temp=temp->children[index];
      }
      temp->terminal = true;
  }    
};
bool Search(Node* root, int index,string pat)
{
    if(root == NULL)
        return 0;
    if(index == pat.length())
    {
        if(root->terminal)
            return 1;
        return 0;
    }
    if(pat[index] != '.')
    {
        return Search(root->children[pat[index]-'a'],index+1,pat);
    }
    else
    {
        for(int i=0;i<26;i++)
        {
            if(Search(root->children[i],index+1,pat))
                return true;
        }
        return false;
    }
}
class WordDictionary {
public:
    /** Initialize your data structure here. */
    Trie* t;
    WordDictionary() {
        this->t = new Trie();
    }
    
    void addWord(string word) {
        this->t->insert(word);
    }
    
    bool search(string word) {
        return Search(t->root,0,word);
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */
