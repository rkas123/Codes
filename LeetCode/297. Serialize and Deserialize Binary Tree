/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    void func(TreeNode* root,string &ans)
    {
        if(root == NULL)
        {
            ans+='$';
            ans+=' ';
            return;
        }
        ans+=to_string(root->val);
        ans+=' ';
        func(root->left,ans);
        func(root->right,ans);
    }
    string serialize(TreeNode* root) {
        string ans = "";
        func(root,ans);
        return ans;
    }

    // Decodes your encoded data to tree.
    TreeNode* dfunc(int &i,string &data)
    {
        string curr="";
        while(i<data.length() && data[i] !=' ')
        {
            curr+=data[i];
            i++;
        }
        i++;
        if(curr == "$")
            return NULL;
        TreeNode* node = new TreeNode(stoi(curr));
        node->left = dfunc(i,data);
        node->right = dfunc(i,data);
        return node;
    }
    TreeNode* deserialize(string data) {
        int i=0;
        return dfunc(i,data);
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));
