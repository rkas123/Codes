class Solution {
public:
    
    void getSubs(string curr,int pos,int index, string tiles, set<string>&subs)
    {
        if(index == tiles.length())
        {
            string temp ="";
            for(int i=0;i<pos;i++)
            {
                temp.push_back(curr[i]);
            }
            subs.insert(temp);
            return;
        }
        
        getSubs(curr,pos,index+1,tiles,subs);
        curr[pos]=tiles[index];
        getSubs(curr,pos+1,index+1,tiles,subs);
    }
    int numTilePossibilities(string tiles) {
        sort(tiles.begin(),tiles.end());
        string curr ="";
        int n = tiles.length();
        for(int i=0;i<n;i++)
            curr+=" ";
        set<string> subs;
        getSubs(curr,0,0,tiles,subs);
        vector<int> factorial(8,1);
        for(int i=1;i<8;i++)
        {
            factorial[i] = factorial[i-1]*i;
        }
        int ans=0;
        for(auto it: subs)
        {
            curr=it;
            vector<int> count(26,0);
            for(int i=0;i<curr.length();i++)
            {
                count[curr[i]-'A']++;
            }
            int ways = factorial[curr.length()];
            for(int i=0;i<26;i++)
            {
                ways/=factorial[count[i]];
            }
            ans+=ways;
        }
        return ans-1;
    }
};
