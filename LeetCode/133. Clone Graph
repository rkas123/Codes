/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* func(Node* node,map<int,Node*> &vis)
    {
        // cout<<node->val<<endl;
        Node* root = new Node(node->val);
        vis[root->val] = root;
        for(auto it: node->neighbors)
        {
            if(vis.count(it->val) == 0)
            {
                root->neighbors.push_back(func(it,vis));
            }
            else
            {
                root->neighbors.push_back(vis[it->val]);
            }
        }
        return root;
    }
    Node* cloneGraph(Node* node) {
        if(node == NULL)
            return NULL;
        map<int,Node*> vis;
        return  func(node,vis);
    }
};
