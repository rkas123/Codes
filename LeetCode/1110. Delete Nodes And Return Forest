/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* dfs(TreeNode* root,vector<int>&to_delete,vector<TreeNode*> &ans)
    {
        if(root == NULL)
            return NULL;
        bool del = false;
        for(auto it: to_delete)
        {
            if(it == root->val)
            {
                del=true;
                break;
            }
        }
        if(del)
        {
            TreeNode* Left = dfs(root->left,to_delete,ans);
            TreeNode* Right = dfs(root->right,to_delete,ans);
            if(Left!=NULL)
                ans.push_back(Left);
            if(Right!=NULL)
                ans.push_back(Right);
            return NULL;
        }
        else
        {
            root->left = dfs(root->left,to_delete,ans);
            root->right = dfs(root->right,to_delete,ans);
        }
        return root;
    }
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        vector<TreeNode*> ans;
        TreeNode* temp = dfs(root,to_delete,ans);
        if(temp!=NULL)
            ans.push_back(temp);
        return ans;
    }
};
