/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* func(TreeNode* root)
    {
        if(root == NULL)
            return NULL;
        if(root->left == NULL && root->right == NULL)
            return root;
        root->left = func(root->left);
        root->right = func(root->right);
        
        if(root->left != NULL && root->right != NULL)
        {
            if(root->right->val < root->left->val)
                swap(root->right,root->left);
        }
        else if(root->left == NULL)
        {
            root->left =root->right;
            root->right = NULL;
        }
        return root;
    }
    
    bool check(TreeNode* root1,TreeNode* root2)
    {
        if(root1==NULL && root2==NULL)
            return true;
        if(root1==NULL || root2==NULL)
            return false;
        
        if(root1->val != root2->val)
            return false;
        
        return check(root1->left,root2->left) && check(root1->right,root2->right);
    }
    
    bool flipEquiv(TreeNode* root1, TreeNode* root2) {
        func(root1);
        func(root2);
        return check(root1,root2);
    }
};
