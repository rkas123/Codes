class Solution {
public:
    void update(int index,int s,int e,int pos,vector<int>&tree)
    {
        if(pos<s || e<pos)
            return;
        if(s==e){
            tree[index]++;
            return;
        }
    
        int mid=(s+e)/2;
        if(pos<=mid)
            update(2*index+1,s,mid,pos,tree);
        else
            update(2*index+2,mid+1,e,pos,tree);
        tree[index] = tree[2*index+1]+tree[2*index+2];
    }
    int query(int index,int s,int e,int l,int r,vector<int>&tree)
    {
        if(s>r || e<l)
            return 0;
        if(s>=l && e<=r)
            return tree[index];
        int mid =(s+e)/2;
        return query(2*index+1,s,mid,l,r,tree) + query(2*index+2,mid+1,e,l,r,tree);
    }
    vector<int> countSmaller(vector<int>& nums) {
        for(int i=0;i<nums.size();i++)
        {
            nums[i]+=10000;
        }
        int n = 20001;
        int size = 1;
        while(size<n)
            size*=2;
        int arrsize =size;
        size*=2;
        vector<int> tree(size,0);
        vector<int> v;
        for(int i=nums.size()-1;i>=0;i--)
        {
            v.push_back(query(0,0,arrsize-1,0,nums[i]-1,tree));
            update(0,0,arrsize-1,nums[i],tree);
        }
        reverse(v.begin(),v.end());
        return v;
    }
};
