/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int getLen(ListNode* head)
    {
        int len=0;
        while(head != NULL)
        {
            len++;
            head=head->next;
        }
        return len;
    }
    ListNode* swapNodes(ListNode* head, int k) {
        int n = getLen(head);
        int first = min (k,n-k+1);
        int second = max(k,n-k+1);
        if(first == second)
            return head;
        if(second == first +1)
        {
            ListNode* temp = head;
            ListNode* prev = NULL;
            while(first != 1)
            {
                prev = temp;
                temp=temp->next;
                first -- ;
            }
            if(prev!=NULL)
                prev->next = temp->next;
            else
                head = temp->next;
            ListNode* Next =temp->next->next;
            temp->next->next = temp;
            temp->next = Next;
            return head;
        }
        else
        {
            ListNode* lprev=NULL;
            ListNode* rprev=NULL;
            ListNode* temp = head;
            while(first!=1)
            {
                lprev=temp;
                temp=temp->next;
                first--;
            }
            ListNode* First = temp;
            temp = head;
            while(second!=1)
            {
                rprev=temp;
                temp=temp->next;
                second--;
            }
            ListNode* Second = temp;
            if(lprev!= NULL)
            {
                lprev->next = Second;
            }
            else
            {
                head=Second;
            }
            ListNode* Next= Second->next;
            Second ->next = First->next;
            rprev->next=First;
            First->next = Next;
            return head;
        }
        return NULL;
    }
};
