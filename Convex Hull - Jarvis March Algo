int cross(vector<int> vect_A,vector<int> vect_B)
{
    vector<int> cross_P(3);
    cross_P[0] = vect_A[1] * vect_B[2] - vect_A[2] * vect_B[1];
    cross_P[1] = vect_A[2] * vect_B[0] - vect_A[0] * vect_B[2];
    cross_P[2] = vect_A[0] * vect_B[1] - vect_A[1] * vect_B[0];
    return cross_P[2];
}

int dist(vector<int> a,vector<int> b)
{
    return abs(a[0] - b[0]) + abs(a[1] - b[1]);
}

vector<vector<int>>FindConvexHull(vector<vector<int>>points_list){
    // Code here
    vector<vector<int>> ans;
    int left = INT_MAX;
    int index=-1;
    for(int i=0;i<points_list.size();i++)
    {
        if(points_list[i][0] < left)
        {
            left=points_list[i][0];
            index=i;
        }
        else if(points_list[i][0] == left && points_list[i][1] > points_list[index][i])
        {
            index = i;
        }
    }
    
    ans.push_back(points_list[index]);
    
    while(true)
    {
        int pt = 0;
        vector<int> prev = ans.back();
        for(int i=1;i<points_list.size();i++)
        {
            int b = cross({points_list[pt][0]-prev[0],points_list[pt][1]-prev[1],0},{points_list[i][0]-prev[0],points_list[i][1]-prev[1],0});
            
            if(b < 0)
            {
                pt = i;
            }
            else if(b==0)
            {
                if(dist(points_list[i],prev) > dist(points_list[pt],prev))
                {
                    pt=i;
                }
            }
        }
        if(points_list[pt][0] == ans[0][0] && points_list[pt][1] == ans[0][1])
            break;
        ans.push_back(points_list[pt]);
    }
    return ans;
}
