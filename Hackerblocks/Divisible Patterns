#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "Yes" << endl;
	else
		cout << "No" << endl;
}
template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)


vector<int> zfunc(string p, string s)
{
	string str = p + '$' + s;
	int n = str.length();
	int Z[n];
	int L = 0, R = 0;
	Z[0] = -1;
	for (int i = 1; i < n; i++)
	{
		if (i > R)
		{
			L = R = i;
			while (R < n && str[R - L] == str[R])
			{
				R++;
			}
			Z[i] = R - L;
			R--;
		}
		else
		{
			int k = i - L;
			if (Z[k] < R - i + 1)
				Z[i] = Z[k];
			else
			{
				L = i;
				while (R < n && str[R - L] == str[R])
				{
					R++;
				}
				Z[i] = R - L;
				R--;
			}
		}
	}
	int req = p.length();
	vector<int> ans;
	for (int i = req + 1; i < str.length(); i++)
	{
		if (Z[i] == req)
		{
			ans.push_back(i - req);
		}
	}
	return ans;
}

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	string p, s;
	cin >> p >> s;
	vector<int> v = zfunc(p, s);
	int n = v.size();
	vector<vector<int>> dp(n + 1, vector<int>(2520, 0));
	dp[0][1] = 1;
	for (int i = 1; i <= n; i++)
	{
		for (int j = 0; j < 2520; j++)
		{
			dp[i][j] += dp[i - 1][j];
			dp[i][j] %= mod;
			int rem = (j * v[i - 1]) % 2520;
			dp[i][rem] += dp[i - 1][j];
			dp[i][rem] %= mod;
		}
	}
	cout << dp[n][0] << endl;
	return 0;
}
