#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);


	in(n);
	vector<int> count(100001, 0);
	for (int i = 0; i < n; i++) {
		in(t);
		count[t]++;
	}
	vector<int> dp(100001, 0);
	int ans = 0;
	for (int i = 1; i < 100001; i++)
	{
		dp[i] = count[i] * i;
		if (i - 2 >= 0)
			dp[i] += dp[i - 2];
		dp[i] = max(dp[i], dp[i - 1]);
		ans = max(ans, dp[i]);
	}
	cout << ans << endl;
	return 0;
}
