#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;
#define setbits __builtin_popcountll

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = LLONG_MAX;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

int cnt[1048576];
int dp[1048576][20];

int to_num(string s)
{
	int ans = 0;
	reverse(s.begin(), s.end());
	int pow = 1;
	for (auto it : s)
	{
		ans += ((it - '0') * pow);
		pow *= 2;
	}
	return ans;
}

int solve(int mask, int pos)
{
	if (pos == -1)
	{
		return cnt[mask];
	}
	if (dp[mask][pos] != -1)
	{
		return dp[mask][pos];
	}

	int res = 0;
	if ((1 << pos) & mask)
	{
		res += solve(mask ^ (1 << pos), pos - 1);
	}
	res %= mod;
	res += solve(mask, pos - 1);
	res %= mod;
	return dp[mask][pos] = res;
}

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	in(n); in(m);
	memset(cnt, 0, sizeof(cnt));
	memset(dp, -1, sizeof(dp));

	for (int i = 0; i < n; i++)
	{
		string s;
		cin >> s;
		cnt[to_num(s)]++;
	}

	string r;
	cin >> r;

	int req = to_num(r);
	int power[21];
	power[0] = 1;
	for (int i = 1; i < 21; i++)
	{
		power[i] = power[i - 1] * 2;
		power[i] %= mod;
	}
	int ans = 0;

	for (int i = 0; i < (1 << 20); i++)
	{
		if ((i & req) == i)
		{
			int x = solve(i, 19);

			if ((setbits(req) - setbits(i)) % 2 == 0)
			{
				ans += power[x];
				ans %= mod;
			}
			else
			{
				ans -= power[x];
				ans += mod;
				ans %= mod;
			}
		}
	}

	cout << ans << endl;

	return 0;
}
