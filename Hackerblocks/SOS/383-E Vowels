#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

// #define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;
#define setbits __builtin_popcountll

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = LLONG_MAX;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)
int dp[16777216][2];

int build_hash(string s)
{
	int ans = 0;
	for (auto it : s)
	{
		ans |= (1 << (it - 'a'));
	}
	return ans;
}
int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	in(n);
	memset(dp, 0, sizeof dp);
	vector<string> v;

	for (int i = 0; i < n; i++)
	{
		string s;
		cin >> s;
		v.pb(s);

		dp[((1 << 24) - 1) ^ build_hash(s)][1]--;
		dp[(1 << 24) - 1][1]++;
	}

	for (int i = 23; i >= 0; i--)
	{
		for (int mask = 0; mask < (1 << 24); mask++)
		{
			if (mask & (1 << i))
			{
				dp[mask ^ (1 << i)][0] += dp[mask][1];
			}
			dp[mask][0] += dp[mask][1];
		}
		for (int mask = 0; mask < (1 << 24); mask++)
		{
			dp[mask][1] = dp[mask][0];
			dp[mask][0] = 0;
		}
	}

	long long ans = 0;

	for (int mask = 0; mask < (1 << 24); mask ++)
	{
		ans ^= (1ll * dp[mask][1] * dp[mask][1]);
	}
	cout << ans << endl;;



	return 0;
}
