#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;
#define setbits __builtin_popcountll

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = LLONG_MAX;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

int A[1050005];
int cnt[1050005];
int dp[(1 << 20)][20];
int h = 0;
int solve(int mask, int pos)
{
	h = max(h, mask);
	if (pos == -1)
	{
		return cnt[mask];
	}

	if (dp[mask][pos] != -1)
		return dp[mask][pos];

	int res = 0;
	if ((1 << pos) & mask)
	{
		res += solve(mask ^ (1 << pos), pos - 1);
	}

	res += solve(mask, pos - 1);
	// cout << mask << " " << pos << " " << res << endl;
	return dp[mask][pos] = res;

}
int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	in(n);
	memset(dp, -1, sizeof(dp));
	memset(cnt, 0, sizeof(cnt));
	for (int i = 0; i < n; i++)
	{
		cin >> A[i];
		cnt[A[i]]++;
	}

	int ans = 0;
	int comp = (1 << 20) - 1;
	for (int i = 0; i < n; i++)
	{
		int val = A[i];
		val = val ^ comp;
		ans += solve(val, 19);
	}
	cout << ans << endl;


	return 0;
}
