#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "Yes" << endl;
	else
		cout << "No" << endl;
}
template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	test()
	{
		in(n);
		vector<vector<int>> v(101);
		cin.ignore();
		for (int i = 0; i < n; i++)
		{
			string s;
			getline(cin, s);
			string curr = "";
			int j = 0;
			while (j < s.length())
			{
				if (s[j] == ' ')
				{
					v[stoi(curr)].pb(i);
					curr = "";
				}
				else
				{
					curr += s[j];
				}
				j++;
			}
			v[stoi(curr)].pb(i);
		}
		int upper = (1 << n) - 1;
		vector<int> dp(upper + 1, 0);
		dp[0] = 1;
		for (int i = 1; i <= 100; i++)
		{
			vector<int> temp(upper + 1, 0);
			for (auto it : v[i])
			{
				for (int j = 0; j <= upper; j++)
				{
					if (j & (1 << it))
					{
						temp[j] += dp[j ^ (1 << it)];
						temp[j] %= mod;
					}
				}
			}
			for (int j = 0; j <= upper; j++)
			{
				dp[j] += temp[j];
				dp[j] %= mod;
			}
		}
		cout << dp[upper] << endl;

	}


	return 0;
}
