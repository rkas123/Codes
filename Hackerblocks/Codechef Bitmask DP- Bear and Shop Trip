#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "Yes" << endl;
	else
		cout << "No" << endl;
}
template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

double dist(pll a, pll b)
{
	return sqrt((a.F - b.F) * (a.F - b.F) + (a.S - b.S) * (a.S - b.S));
}

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	test()
	{
		in(n); in(k);
		vector<pll> shops(n);
		vector<string> items(n);
		for (int i = 0; i < n; i++)
		{
			cin >> shops[i].F >> shops[i].S;
		}
		for (int i = 0; i < n; i++)
			cin >> items[i];

		int mask = (1 << k) - 1;
		vector<vector<double>> dp(mask + 1, vector<double>(n, inf));

		for (int i = 0; i < n; i++)
			dp[0][i] = 0;




		for (int currmask = 1; currmask <= mask; currmask++) //fix dp[i][currmask]
		{
			for (int i = 0; i < n; i++)
			{
				for (int j = 0; j < k; j++)   //this item is taken from ith shop
				{
					if (items[i][j] == '0')
						continue;
					if ((currmask & (1 << j)) == 0)
						continue;
					for (int prevshop = 0; prevshop < n; prevshop++)
					{
						if ((currmask ^ (1 << j)) == 0)
						{
							dp[currmask][i] = min(dp[currmask][i], dist({0, 0}, shops[i]));
							continue;
						}
						if (dp[currmask ^ (1 << j)][prevshop] == inf)
							continue;
						dp[currmask][i] = min(dp[currmask][i], dp[currmask ^ (1 << j)][prevshop] + dist(shops[i], shops[prevshop]));
					}
				}
			}

		}

		double ans = inf;


		for (int i = 0; i < n; i++)
		{
			if (dp[mask][i] != inf)
				ans = min(ans, dp[mask][i] + dist(shops[i], {0, 0}));
		}
		if (ans == inf)
			cout << "-1" << endl;
		else
			cout << fixed << setprecision(10) << ans << endl;

	}

	return 0;
}
