#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	in(n); in(m);
	vector<int> b(n);
	for (int i = 0; i < n; i++)
		cin >> b[i];

	vector<int> g(m);
	for (int i = 0; i < m; i++)
		cin >> g[i];
	sort(b.begin(), b.end());
	sort(g.begin(), g.end());
	vector<vector<int>> dp(n, vector<int>(m, inf));
	dp[0][0] = abs(b[0] - g[0]);
	for (int j = 1; j < m; j++)
	{
		dp[0][j] = min(dp[0][j - 1], abs(b[0] - g[j]));
	}
	for (int i = 1; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			if (j - 1 >= 0 && dp[i - 1][j - 1] != inf)
			{
				dp[i][j] = min(dp[i][j], abs(b[i] - g[j]) + dp[i - 1][j - 1]);
			}
			if (j - 1 >= 0)
				dp[i][j] = min(dp[i][j] , dp[i][j - 1]);
		}
	}
	cout << dp[n - 1][m - 1] << endl;


	return 0;
}
