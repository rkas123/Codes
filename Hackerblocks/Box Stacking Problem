#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)


class dimensions {
public:
	int l, b, h;
	dimensions(int l, int b, int h)
	{
		this->l = l;
		this->b = b;
		this->h = h;
	}
	void func()
	{
		int temp = this->l;
		this->l = this->b;
		this->b = temp;
	}
};

bool cmp(dimensions* a, dimensions* b)
{
	if (a->l != b->l)
		return a->l > b->l;
	if (a->b != b->b)
		return a->b > b->b;
	return a->h > b->h;
}
int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);


	test()
	{
		in(n);
		vector<dimensions*> v;
		for (int i = 0; i < n; i++)
		{
			in(l); in(b); in(h);
			v.push_back(new dimensions(l, b, h));
			v.push_back(new dimensions(l, h, b));
			v.push_back(new dimensions(b, h, l));
		}
		for (auto it : v)
		{
			if (it->l < it->b)
				it->func();
		}
		sort(v.begin(), v.end(), cmp);
		// for (auto it : v)
		// 	cout << it->l << " " << it->b << " " << it->h << endl;
		int ans = 0;
		vector<int> dp(v.size(), 0);
		for (int i = 0; i < v.size(); i++)
		{
			int pos = 0;
			for (int j = 0; j < i; j++)
			{
				if (v[i]->l < v[j]->l && v[i]->b < v[j]->b)
				{
					pos = max(pos, dp[j]);
				}
			}
			dp[i] = pos + v[i]->h;
			ans = max(ans, dp[i]);
		}
		cout << ans << endl;

	}

	return 0;
}
