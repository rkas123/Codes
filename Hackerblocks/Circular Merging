#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "Yes" << endl;
	else
		cout << "No" << endl;
}
template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

int getSum(int l, int r, vector<int>&v)
{
	if (r >= l)
	{
		int ans = v[r];
		if (l != 0)
			ans -= v[l - 1];
		return ans;
	}
	int n = v.size();
	int ans = v[n - 1] - v[l - 1] + v[r];
	return ans;
}

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	in(n);
	vector<int> v(n);
	vector<int> cum(n);
	for (int i = 0; i < n; i++)
		cin >> v[i];
	cum[0] = v[0];
	for (int i = 1; i < n; i++)
		cum[i] = cum[i - 1] + v[i];
	vector<vector<int>> dp(n, vector<int>(n, inf));
	for (int i = 0; i < n; i++)
	{
		dp[i][i] = 0;
	}
	for (int j = 0; j < n; j++)
	{
		for (int i = j - 1; i >= 0; i--)
		{
			for (int k = i; k < j; k++)
			{
				dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + getSum(i, k, cum) + getSum(k + 1, j, cum));
			}
		}
	}
	for (int i = n - 1; i >= 0; i--)
	{
		for (int j = 0; j < i; j++)
		{


			for (int k = i; k != j; k = (k + 1) % n)
			{
				dp[i][j] = min(dp[i][j] , dp[i][k] + dp[(k + 1) % n][j] + getSum(i, k, cum) + getSum((k + 1) % n, j, cum));
			}
		}
	}
	int ans = inf;
	
	for (int i = 0; i < n; i++)
	{
		ans = min(ans, dp[i][(i + n - 1) % n]);
	}
	cout << ans << endl;

	return 0;
}
