#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "Yes" << endl;
	else
		cout << "No" << endl;
}
template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

int countbits(int n)
{
	int ans = 0;
	while (n > 0)
	{
		ans++;
		n = n & (n - 1);
	}
	return ans;
}

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	in(n);
	vector<int> v(n);
	for (int i = 0; i < n; i++)
		cin >> v[i];

	int mask = (1 << n) - 1;
	int dp[mask + 1];
	memset(dp, -1, sizeof(dp));
	dp[0] = 0;

	for (int i = 0; i < n; i++)
	{
		int temp[mask + 1];
		memset(temp, -1, sizeof(dp));
		temp[0] = 0;
		for (int j = 1; j <= mask; j++)
		{
			for (int pos = 0; pos < n; pos++)
			{
				if (((1 << pos) & j) == 0)
					continue;
				if (countbits(j) == 1)
				{
					temp[j] = max(temp[j], v[i] * pos);
					continue;
				}
				if (dp[j ^ (1 << pos)] != -1)
				{
					temp[j] = max(temp[j], pos * v[i] + dp[j ^ (1 << pos)]);
				}
			}
		}
		for (int j = 0; j <= mask; j++) {
			dp[j] = temp[j];
		}
	}
	int ans = 0;
	cout << dp[mask] << endl;

	return 0;
}
