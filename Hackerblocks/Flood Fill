#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "Yes" << endl;
	else
		cout << "No" << endl;
}
template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);


	in(n);
	vector<int> v(n);
	for (int i = 0; i < n; i++)
		cin >> v[i];
	vector<int> temp;
	temp.push_back(v[0]);
	for (int i = 1; i < n; i++)
	{
		if (v[i] != v[i - 1])
			temp.push_back(v[i]);
	}
	n = temp.size();
	vector<vector<int>> dp(n, vector<int>(n, inf));
	for (int j = 0; j < n; j++)
	{
		dp[j][j] = 0;
		if (j - 1 >= 0)
		{
			if (temp[j - 1] == temp[j])
				dp[j - 1][j] = 0;
			else
				dp[j - 1][j] = 1;
		}
		for (int i = j - 2; i >= 0; i--)
		{
			if (temp[i] == temp[j])
			{
				dp[i][j] = dp[i + 1][j - 1] + 1;
			}
			else
			{
				dp[i][j] = min(dp[i + 1][j] + 1, dp[i][j - 1] + 1);
			}
		}
	}
	
	cout << dp[0][n - 1] << endl;

	return 0;
}
