#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "Yes" << endl;
	else
		cout << "No" << endl;
}
template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

vector<int> func(int n)
{
	vector<int> v;
	while (n > 0)
	{
		v.pb(n & 1);
		n >>= 1;
	}
	return v;
}

int countbits(int n)
{
	int ans = 0;
	while (n > 0)
	{
		n = n & (n - 1);
		ans++;
	}
	return ans;
}


int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	test()
	{
		in(a); in(b); in(c);
		int n = countbits(a);
		int m = countbits(b);

		vector<int> v = func(c);
		vector<int> A = func(a);
		vector<int> B = func(b);

		int len = v.size();

		int dp[len][n + 1][m + 1][2];

		memset(dp, 0, sizeof(dp));

		if (v[0] == 0)
		{
			dp[0][0][0][0] = 1;
			dp[0][1][1][1] = 1;
		}
		else
		{
			dp[0][0][1][0] = 1;
			dp[0][1][0][0] = 1;
		}

		for (int i = 1; i < len; i++)
		{
			for (int j = 0; j <= n; j++)
			{
				for (int k = 0; k <= m; k++)
				{
					if (v[i] == 0)
					{
						dp[i][j][k][0] += dp[i - 1][j][k][0];
						if (j > 0)
							dp[i][j][k][1] += dp[i - 1][j - 1][k][1];
						if (k > 0)
							dp[i][j][k][1] += dp[i - 1][j][k - 1][1];
						if (j > 0 && k > 0)
							dp[i][j][k][1] += dp[i - 1][j - 1][k - 1][0];
					}
					else
					{
						if (j > 0)
							dp[i][j][k][0] += dp[i - 1][j - 1][k][0];
						if (k > 0)
							dp[i][j][k][0] += dp[i - 1][j][k - 1][0];
						dp[i][j][k][0] += dp[i - 1][j][k][1];
						if (j > 0 && k > 0)
							dp[i][j][k][1] += dp[i - 1][j - 1][k - 1][1];
					}
				}
			}
		}

		cout << dp[len - 1][n][m][0] << endl;


	}

	return 0;
}
