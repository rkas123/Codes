#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "Yes" << endl;
	else
		cout << "No" << endl;
}
template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)
vector<int> func(int n)
{
	vector<int> ans(60, 0);
	int i = 0;
	while (n > 0)
	{
		ans[i++] = n & 1;
		n >>= 1;
	}
	return ans;
}
int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	in(a); in(b);
	vector<int> A = func(b);
	vector<int> B = func(a);

	int powers[60];
	powers[0] = 1;
	for (int i = 1; i < 60; i++)
	{
		powers[i] = powers[i - 1] * 2;
	}
	int i = 59;
	int ans = 0;
	while (i >= 0 && A[i] == B[i])
	{
		i--;
	}
	if (i < 0)
	{
		cout << ans << endl;
		return 0;
	}
	ans += powers[i];
	i--;
	bool afree = false, bfree = false;
	while (i >= 0)
	{
		if (!afree && !bfree)
		{
			if (A[i] == 1 && B[i] == 1)
			{
				ans += powers[i];
				afree = true;
			}
			else if (A[i] == 1 && B[i] == 0)
			{
				ans += powers[i];
				afree = true;
				bfree = true;
			}
			else if (A[i] == 0 && B[i] == 1)
			{
				ans += powers[i];
			}
			else
			{
				ans += powers[i];
				bfree = true;
			}
		}
		else if (!afree)
		{
			if (A[i] == 0)
			{
				ans += powers[i];
			}
			else
			{
				afree = true;
				ans += powers[i];
			}
		}
		else if (!bfree)
		{
			if (B[i] == 0)
			{
				bfree = true;
				ans += powers[i];
			}
			else
			{
				ans += powers[i];
			}
		}
		else
		{
			ans += powers[i];
		}
		i--;
	}
	cout << ans << endl;
	return 0;
}
