#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)


struct line {
	int m, c;
};
long double intersectX(line X, line Y)
{
	if (X.m == Y.m)
		return inf;
	return (double)(X.c - Y.c) / (double)(Y.m - X.m);
}

int eval(int x, line X)
{
	return X.m * x + X.c;
}

deque<line> st;
vector<long double> points;

void addline (line X)
{
	if (st.empty())
	{
		st.push_back(X);
		return;
	}
	if (st.size() == 1)
	{
		points.push_back(intersectX(X, st.back()));
		st.push_back(X);
		return;
	}
	while (points.size())
	{
		line l2 = st.back();
		st.pop_back();
		line l1 = st.back();

		if (intersectX(X, l1) > points.back()) {
			st.pb(l2);
			break;
		}
		else
		{
			points.pop_back();
		}
	}
	points.push_back(intersectX(X, st.back()));
	st.push_back(X);
}

int findbest(int x) {
	int idx = lower_bound(points.begin(), points.end(), x) - points.begin();
	return eval(x, st[idx]);
}


int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	in(n);
	vector<vector<int>> v(n, vector<int>(3));
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < 3; j++)
			cin >> v[i][j];
	}

	sort(v.begin(), v.end());

	line t;
	t.m = 0;
	t.c = 0;
	addline(t);
	vector<int> dp(n, 0);
	for (int i = 0; i < n; i++)
	{
		dp[i] = findbest(-1 * v[i][1]) + v[i][0] * v[i][1] - v[i][2];
		t.m = v[i][0];
		t.c = dp[i];
		addline(t);
	}
	int ans = 0;
	for (int i = 0; i < n; i++)
	{
		ans = max(ans, dp[i]);
	}
	cout << ans << endl;

	return 0;
}
