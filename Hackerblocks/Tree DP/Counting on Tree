#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)
int k;
int a[50004];
vector<int> adjlist[50004];
int dp[50004][101];
int ans = 0;
void dfs(int src, int par)
{
	int memo[k + 1] = {0};
	memo[a[src]] = 1;
	int temp[k + 1] = {0};
	temp[a[src]] = 1;
	for (auto it : adjlist[src])
	{
		if (it != par) {
			dfs(it, src);
			for (int j = 0; j <= k; j++)
			{
				for (int i = 0; i + j <= k; i++)
				{
					temp[i + j] += (memo[i] * dp[it][j]) % mod;
					temp[i + j] %= mod;
				}
			}
			for (int j = 0; j <= k; j++)
				memo[j] = temp[j];

		}
	}

	for (int j = 0; j <= k; j++)
		dp[src][j] = memo[j];

	ans += dp[src][k];
	ans %= mod;
}
int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);


	test()
	{
		in(n);
		ans = 0;
		cin >> k;
		memset(dp, 0 , sizeof dp);
		for (int i = 0; i <= n; i++)
		{
			adjlist[i].clear();
		}
		for (int i = 1; i <= n; i++)
			cin >> a[i];

		for (int i = 1; i < n; i++)
		{
			in(u); in(v);
			adjlist[u].pb(v);
			adjlist[v].pb(u);
		}

		dfs(1, -1);

		cout << ans << endl;
	}

	return 0;
}
