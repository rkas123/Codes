#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

int Ans = 0;

pll dfs(int src, vector<vector<int>> &adjlist, vector<bool>&vis, vector<int>&w)
{
	pll ans = {inf, -inf};

	vis[src] = true;
	bool found = false;
	for (auto it : adjlist[src])
	{
		if (!vis[it])
		{
			found = true;
			pll p = dfs(it, adjlist, vis, w);

			ans.F = min(ans.F, p.F);
			ans.S = max(ans.S, p.S);
		}
	}
	if (found)
		Ans = max(Ans, max(abs(w[src] - ans.F), abs(w[src] - ans.S)));
	ans.F = min(ans.F, w[src]);
	ans.S = max(ans.S, w[src]);
	return ans;
}

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	in(n);
	vector<int> w(n);
	for (int i = 0; i < n; i++)
		cin >> w[i];

	vector<vector<int>> adjlist(n);
	int src;
	for (int i = 0; i < n; i++)
	{
		in(t);
		if (t == -1) {
			src = i;
			continue;
		}
		t--;
		adjlist[i].pb(t);
		adjlist[t].pb(i);
	}

	vector<bool> vis(n, false);
	dfs(src, adjlist, vis, w);
	cout << Ans << endl;
	return 0;
}
