#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

int dp[200005];
int final[200005];
int sub[200005];

void dfs(int src, vector<vector<int>>&adjlist, vector<bool>&vis)
{
	vis[src] = true;
	int ans = 0;
	int s = 0;
	for (auto it : adjlist[src])
	{
		if (!vis[it])
		{
			dfs(it, adjlist, vis);
			s += sub[it];
			ans += dp[it];
		}
	}
	sub[src] = s + 1;
	dp[src] = ans + s + 1;
}

void dfs1(int src, vector<vector<int>> &adjlist, vector<bool>&vis, int par)
{
	vis[src] = true;
	if (par != -1)
	{
		final[src] = final[par] + vis.size() - 1 - 2 * sub[src];
	}
	else
	{
		final[src] = dp[src];
	}

	for (auto it : adjlist[src])
	{
		if (!vis[it])
		{
			dfs1(it, adjlist, vis, src);
		}
	}
}
int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	in(n);

	vector<vector<int>> adjlist(n + 1);

	for (int i = 1; i < n; i++)
	{
		in(u); in(v);
		adjlist[u].pb(v);
		adjlist[v].pb(u);
	}
	memset(dp, 0, sizeof(dp));
	memset(final, 0, sizeof(final));
	memset(sub, 0, sizeof(sub));

	vector<bool> vis(n + 1, false);

	dfs(1, adjlist, vis);

	int ans = 0;
	for (int i = 1; i <= n; i++)
		vis[i] = false;

	dfs1(1, adjlist, vis, -1);

	for (int i = 1; i <= n; i++)
	{
		ans = max(ans, final[i]);
	}
	cout << ans << endl;


	return 0;
}
