#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "Yes" << endl;
	else
		cout << "No" << endl;
}
template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

int getMask(string s)
{
	int ans = 0;
	for (int i = 0; i < s.length(); i++)
	{
		if (s[i] == 'A')
		{
			ans += (1 << 0);
		}
		else if (s[i] == 'B')
		{
			ans += (1 << 1);
		}
		else
		{
			ans += (1 << 2);
		}
	}
	return ans;
}

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	in(n);
	vector<pair<string, int>> v(n);
	for (int i = 0; i < n; i++)
	{
		cin >> v[i].F;
	}
	for (int i = 0; i < n; i++)
	{
		cin >> v[i].S;
	}
	vector<int> dp(8, inf);
	dp[0] = 0;

	for (int i = 0; i < n; i++)
	{
		int temp[8];
		for (int j = 0; j < 8; j++)
			temp[j] = dp[j];
		int currmask = getMask(v[i].F);
		for (int mask = 0; mask <= 7; mask++)
		{
			if (dp[mask] != inf)
				temp[mask | currmask] = min(temp[mask | currmask], dp[mask] + v[i].S);
		}

		for (int j = 0; j <= 7; j++) {
			dp[j] = temp[j];
		}
	}
	cout << dp[7] << endl;



	return 0;
}
