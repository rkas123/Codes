#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "Yes" << endl;
	else
		cout << "No" << endl;
}
template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)


int func(string s)
{
	int ans = 0;
	for (int i = 0; i < 10; i++)
	{
		if (s[i] == '1')
			ans++;
	}
	return ans;
}
void print_func(int n)
{
	string ans = "";
	while (n > 0)
	{
		if (n & 1)
			ans += '1';
		else
			ans += '0';
		n >>= 1;
	}
	reverse(ans.begin(), ans.end());
	cout << ans << endl;
}
int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	test()
	{
		string a, b, c;
		cin >> a >> b >> c;
		int n = func(a);
		int m = func(b);
		int o = func(c);


		int powers[10];
		powers[9] = 1;
		for (int i = 8; i >= 0; i--)
		{
			powers[i] = 2 * powers[i + 1];
		}


		int dp[10][n + 1][m + 1][o + 1];
		memset(dp, 0, sizeof(dp));
		if (o >= 0)
			dp[0][0][0][1] = powers[0];
		if (m >= 0)
			dp[0][0][1][0] = powers[0];
		if (n >= 0)
			dp[0][1][0][0] = powers[0];
		if (n >= 0 && m >= 0 && o >= 0)
			dp[0][1][1][1] = powers[0];


		for (int i = 1; i < 10; i++)
		{
			for (int j = 0; j <= n; j++)
			{
				for (int k = 0; k <= m; k++)
				{
					for (int l = 0; l <= o; l++)
					{
						if (j - 1 >= 0)
							dp[i][j][k][l] = max(dp[i][j][k][l], dp[i - 1][j - 1][k][l] + powers[i]);
						if (k - 1 >= 0)
							dp[i][j][k][l] = max(dp[i][j][k][l], dp[i - 1][j][k - 1][l] + powers[i]);
						if (l - 1 >= 0)
							dp[i][j][k][l] = max(dp[i][j][k][l], dp[i - 1][j][k][l - 1] + powers[i]);

						if (j - 1 >= 0 && k - 1 >= 0)
							dp[i][j][k][l] = max(dp[i][j][k][l] , dp[i - 1][j - 1][k - 1][l]);
						if (j - 1 >= 0 && l - 1 >= 0)
							dp[i][j][k][l] = max(dp[i][j][k][l] , dp[i - 1][j - 1][k][l - 1]);
						if (l - 1 >= 0 && k - 1 >= 0)
							dp[i][j][k][l] = max(dp[i][j][k][l] , dp[i - 1][j][k - 1][l - 1]);

						if (j > 0 && k > 0 && l > 0)
							dp[i][j][k][l] = max(dp[i][j][k][l], dp[i - 1][j - 1][k - 1][l - 1] + powers[i]);
						dp[i][j][k][l] = max(dp[i][j][k][l], dp[i - 1][j][k][l]);
						// cout << i << "," << j << "," << k << "," << l << " " << dp[i][j][k][l] << endl;

					}
				}
			}
		}
		print_func(dp[9][n][m][o]);
	}

	return 0;
}
