#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "Yes" << endl;
	else
		cout << "No" << endl;
}
template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	in(n); in(m);
	vector<vector<int>> dp(n, vector<int>(n, 0));
	vector<vector<int>> tl(n, vector<int>(n));
	vector<vector<int>> tr(n, vector<int>(n));
	vector<vector<int>> bl(n, vector<int>(n));
	vector<vector<int>> br(n, vector<int>(n));
	for (int i = 0; i < m; i++)
	{
		in(a); in(b);
		a--; b--;
		dp[a][b] = 1;
		tl[a][b] = tr[a][b] = bl[a][b] = br[a][b] = dp[a][b];
	}

	for (int i = 0; i < n; i++)
	{
		for (int j = 1; j < n; j++)
		{
			tl[i][j] += tl[i][j - 1];
			bl[i][j] += bl[i][j - 1];
		}
		for (int j = n - 2; j >= 0; j--)
		{
			tr[i][j] += tr[i][j + 1];
			br[i][j] += br[i][j + 1];
		}
	}

	for (int j = 0; j < n; j++)
	{
		for (int i = 1; i < n; i++)
		{
			tl[i][j] += tl[i - 1][j];
			tr[i][j] += tr[i - 1][j];
		}
		for (int i = n - 2; i >= 0; i--)
		{
			bl[i][j] += bl[i + 1][j];
			br[i][j] += br[i + 1][j];
		}
	}

	int ans = 0;

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			int t1 = tl[i][j];
			int t2 = 0, t3 = 0, t4 = 0;
			if (j + 1 < n)
			{
				t2 = tr[i][j + 1];
			}
			if (i + 1 < n)
			{
				t3 = bl[i + 1][j];
			}
			if (i + 1 < n && j + 1 < n)
			{
				t4 = br[i + 1][j + 1];
			}
			ans = max(ans, min(min(t1, t2), min(t3, t4)));
		}
	}
	cout << ans << endl;





	return 0;
}
