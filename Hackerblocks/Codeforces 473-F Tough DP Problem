#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "Yes" << endl;
	else
		cout << "No" << endl;
}
template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	in(n); in(q);
	set<int> s;
	s.insert(0);
	vector<int> dp(n + 1);
	dp[0] = 1;
	map<int, int> first_occurance;
	first_occurance[0] = 0;
	for (int i = 1; i <= n; i++)
	{
		in(a);
		if (s.find(a) == s.end())
		{
			dp[i] = dp[i - 1];

			vector<int> v;
			for (auto it : s)
			{
				v.pb(a ^ it);
				first_occurance[a ^ it] = i;
			}
			s.insert(a);
			first_occurance[a] = i;
			for (auto it : v)
				s.insert(it);
		}
		else
		{
			dp[i] = dp[i - 1] * 2;
			dp[i] %= mod;

		}
		
	}
	
	while (q--)
	{
		in(l); in(x);
		if (first_occurance.count(x) == 0)
		{
			cout << 0 << endl;
			continue;
		}
		if (first_occurance[x] <= l)
		{
			cout << dp[l] << endl;
		}
		else
		{
			cout << 0 << endl;
		}
	}

	return 0;
}
