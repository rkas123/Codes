#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

int dp[20][504][512][2];
string s;
int k;

int solve(int pos, int Mod, int mask, int tight, int last)
{
	if (dp[pos][Mod][mask][tight] != -1)
	{
		return dp[pos][Mod][mask][tight];
	}
	if (pos == s.length())
	{
		if (mask == 0)
			return dp[pos][Mod][mask][tight] = 0;

		int ans = 0;
		vector<int> v(10, false);

		if ((mask & (1 << 4)) && (last % 5 == 0))
			v[5] = true;
		for (int i = 1; i < 10; i++)
		{
			if (Mod % i == 0 && i != 5)
				v[i] = true;
		}

		int i = 1;
		while (mask > 0)
		{
			if (mask & 1)
			{
				ans += (v[i] ? 1 : 0);
			}
			i++;
			mask >>= 1;
		}
		if (ans >= k)
			return dp[pos][Mod][mask][tight] = 1;
		return dp[pos][Mod][mask][tight] = 0;
	}



	int up = (tight ? s[pos] - '0' : 9);
	int res = 0;
	for (int i = 0; i <= up; i++)
	{
		if (i == 0)
		{
			res += solve(pos + 1, (Mod * 10 + i) % 504, mask, tight & (i == up), i);
		}
		else
		{
			res += solve(pos + 1, (Mod * 10 + i) % 504, mask | (1 << (i - 1)), tight & (i == up), i);
		}
	}
	return dp[pos][Mod][mask][tight] = res;
}
int check(string a)
{
	int ans = 0;
	vector<int> v(10, false);
	int N = stol(a);
	for (int i = 0; i < a.length(); i++)
	{
		if (s[i] == '0')
			continue;
		int num = s[i] - '0';
		if (N % num == 0)
		{
			v[num] = true;
		}
	}
	for (int i = 1; i < 10; i++)
	{
		ans += (v[i] ? 1 : 0);
	}
	return (ans >= k) ? 1 : 0;
}
int eval(string a)
{
	memset(dp, -1, sizeof(dp));
	s = a;
	return solve(0, 0, 0, 1, -1);
}


int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	test()
	{
		string l, r;
		cin >> l >> r;
		cin >> k;
		cout << eval(r) - eval(l) + check(l) << endl;
	}

	return 0;
}
