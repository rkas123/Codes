#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

// #define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e9 + 1;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)
vector<pll> adjlist[5005];
vector<pll> rev[5005];
vector<int> topo;

void topsort(int src, vector<bool>&vis)
{
	vis[src] = true;
	for (auto it : adjlist[src])
	{
		if (!vis[it.F])
			topsort(it.F, vis);
	}
	topo.pb(src);
}

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	in(n); in(m); in(t);
	for (int i = 0; i < m; i++)
	{
		in(u); in(v); in(w);
		adjlist[u].pb({v, w});
		rev[v].pb({u, w});
	}

	vector<bool>vis(n + 1, false);
	for (int i = 1; i <= n; i++)
	{
		if (!vis[i])
			topsort(i, vis);
	}


	map<int, pll> dp[n + 1];

	dp[n][0] = {0, -1};

	for (auto it : topo)
	{
		for (auto node : rev[it])
		{
			for (auto i : dp[it])
			{
				if (i.S.F + node.S > t)
					continue;
				if (dp[node.F].count(i.F + 1) == 0)
				{
					dp[node.F][i.F + 1] = {i.S.F + node.S, it};
				}
				else
				{
					if (dp[node.F][i.F + 1].F > i.S.F + node.S)
					{
						dp[node.F][i.F + 1] = {i.S.F + node.S, it};
					}
				}
			}
		}
	}

	int ans = 0;
	for (auto it : dp[1])
	{
		ans = it.F;
	}

	int node = 1;
	cout << ans + 1 << endl;
	while (node != -1)
	{
		cout << node << " ";
		node = dp[node][ans].S;
		ans--;
	}
	cout << endl;
	return 0;
}
