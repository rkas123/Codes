#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = LLONG_MAX;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

int n, m, p;
double dp[13][(1 << 13)];
bool vis[13][(1 << 13)];
pair<int, double> cost[13];				//shop,cost

double adjmatrix[13][13];


double solve(int src, int mask)
{
	if (vis[src][mask])
		return dp[src][mask];
	if (mask == (1 << p) - 1)
	{
		// cout << src << " " << mask << " " << adjmatrix[src][0] << endl;
		return dp[src][mask] = adjmatrix[src][0];
	}


	double res = inf;

	for (int i = 0; i < p; i++)
	{
		if (mask & (1 << i))
		{
			continue;
		}
		if (adjmatrix[src][cost[i].F] != -1)
		{
			res = min(res, solve(cost[i].F, mask | (1 << i)) + adjmatrix[src][cost[i].F] - cost[i].S);
		}
		res = min(res, solve(src, mask | (1 << i)));

	}
	// cout << src << " " << mask << " " << res << endl;
	vis[src][mask] = true;
	return dp[src][mask] = res;
}
int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	test()
	{
		cin >> n >> m;

		for (int i = 0; i <= n; i++)
		{
			for (int j = 0; j <= n; j++)
			{
				adjmatrix[i][j] = inf;
			}
			adjmatrix[i][i] = 0;

		}

		memset(vis, 0, sizeof vis);
		for (int i = 0; i < m; i++)
		{
			in(u); in(v);
			double dist;
			cin >> dist;
			adjmatrix[u][v] = dist;
			adjmatrix[v][u] = dist;
		}

		for (int k = 0; k <= n; k++)
		{
			for (int i = 0; i <= n; i++)
			{
				for (int j = 0; j <= n; j++)
				{
					if (adjmatrix[j][k] != inf && adjmatrix[i][k] != inf)
					{
						adjmatrix[i][j] = min(adjmatrix[i][j], adjmatrix[i][k] + adjmatrix[j][k]);
					}
				}
			}
		}

		cin >> p;
		for (int i = 0; i < p; i++)
		{
			cin >> cost[i].F >> cost[i].S;
		}

		double ans = solve(0, 0);
		if (ans < 0)
		{
			cout << "Daniel can save $" << fixed << setprecision(2) << -1 * ans << endl;
		}
		else
		{
			cout << "Donâ€™t leave the house" << endl;
		}
	}

	return 0;
}
