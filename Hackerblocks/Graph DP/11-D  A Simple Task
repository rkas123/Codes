#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;
#define setbits __builtin_popcountll

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = LLONG_MAX;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

int adjmatrix[20][20];
int dp[20][(1 << 20)];
int n;


int solve(int src, int mask, int first)
{
	if (setbits(mask) == n)
	{
		return (adjmatrix[src][first] == 1) ? 1 : 0;
	}

	if (dp[src][mask] != -1)
		return dp[src][mask];

	int res = 0;

	if (setbits(mask) > 2 && adjmatrix[src][first] == 1)
	{
		res = 1;
	}

	for (int i = first + 1; i <= n; i++)
	{
		if (adjmatrix[src][i] == 1 && (mask & (1 << i)) == 0)
		{
			res += solve(i, mask | (1 << i), first);
		}
	}

	return dp[src][mask] = res;
}

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	cin >> n;
	in(m);

	memset(adjmatrix, -1, sizeof(adjmatrix));


	for (int i = 0; i < m; i++)
	{
		in(a); in(b);
		adjmatrix[a][b] = 1;
		adjmatrix[b][a] = 1;
	}

	int ans = 0;
	for (int i = 1; i <= n; i++)
	{
		memset(dp, -1, sizeof(dp));
		ans += solve(i, (1 << i), i) / 2;
	}

	cout << ans << endl;
	return 0;
}
