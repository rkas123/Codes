#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "Yes" << endl;
	else
		cout << "No" << endl;
}
template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)


int N = 51;  //Set the number of elements
bool sieve[51];

vector<int> makeSieve()
{
	for (int i = 0; i < N; i++)
	{
		if (i & 1)
			sieve[i] = true;
		else
			sieve[i] = false;
	}
	sieve[1] = false;
	sieve[2] = true;
	for (int i = 3; i * i <= N; i += 2)
	{
		if (sieve[i])
		{
			for (int j = i * i; j <= N; j += (2 * i))
				sieve[j] = false;
		}
	}
	vector<int> ans;
	for (int i = 1; i < N; i++)
	{
		if (sieve[i])
			ans.pb(i);
	}
	return ans;
}

int getMask(int n, vector<int>&primes, map<int, int>&m)
{
	int ans = 0;
	for (auto it : primes)
	{
		if (n % it == 0)
		{
			ans += (1 << m[it]);
		}
	}
	return ans;
}

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	vector<int> primes = makeSieve();

	in(n);
	vector<int> v(n);
	for (int i = 0; i < n; i++)
		cin >> v[i];
	map<int, int> maskmap;
	for (int i = 0; i < primes.size(); i++)
	{
		maskmap[primes[i]] = i;
	}
	int mask = (1 << primes.size());
	int dp[n + 1][mask];
	memset(dp, 0, sizeof(dp));


	for (int i = 1; i <= n; i++)
	{
		int currmask = getMask(v[i - 1], primes, maskmap);
		for (int j = 0; j < mask; j++)
			dp[i][j] = dp[i - 1][j];
		for (int j = 0; j < mask; j++)
		{
			if ((j & currmask) == 0)
			{
				dp[i][j | currmask] = max(dp[i][j | currmask] , dp[i - 1][j] + 1);
			}
		}
	}

	int ans = 0;


	for (int j = 0; j < mask; j++)
	{
		ans = max(ans, dp[n][j]);
	}
	cout << ans << endl;


	return 0;
}
