#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

vector<int> adjlist[100005];
int dp[100005], dp1[100005];

void dfs(int src, int par)
{
	int ans = 1;
	for (auto it : adjlist[src])
	{
		if (it != par)
		{
			dfs(it, src);
			ans *= (1 + dp[it]);
			ans %= mod;
		}
	}
	dp[src] = ans;
}

void dfs1(int src, int par, int from_par)
{
	dp1[src] = dp[src] * (from_par + 1);
	dp1[src] %= mod;
	vector<int> children;
	for (auto it : adjlist[src])
	{
		if (it == par)
			children.pb(from_par + 1);
		else
			children.pb(dp[it] + 1);
	}
	int curr = 1;
	vector<int> prefix;
	for (auto it : children)
	{
		curr *= it;
		curr %= mod;
		prefix.pb(curr);

	}

	int up = children.size() * 1;
	up -= 2;

	for (int i = up; i >= 0; i--) {
		children[i] *= children[i + 1];
		children[i] %= mod;
	}

	for (int i = 0; i < adjlist[src].size(); i++)
	{
		if (adjlist[src][i] != par)
		{
			int other = 1;
			if (i - 1 >= 0)
				other *= prefix[i - 1];
			if (i + 1 < children.size())
			{
				other *= children[i + 1];
				other %= mod;
			}
			dfs1(adjlist[src][i], src, other);
		}
	}
}

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	in(n);
	cin >> mod;
	memset(dp, 0, sizeof dp);
	memset(dp1, 0, sizeof dp1);

	for (int i = 1; i < n; i++)
	{
		in(a); in(b);
		adjlist[a].pb(b);
		adjlist[b].pb(a);
	}

	dfs(1, -1);
	dfs1(1, -1, 0);
	for (int i = 1; i <= n; i++)
		cout << dp1[i] << endl;
	return 0;
}
