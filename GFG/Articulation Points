#include<bits/stdc++.h>

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"
#define segleft 2*index+1
#define segright 2*index+2

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
vector<int> adjlist[100];
int parent[100];
int disc[100];
int low[100];
bool vis[100];
set<int> articulationPoints;
int timer = 0;
void dfs(int src)
{
	vis[src] = true;
	int count = 0;
	disc[src] = timer;
	low[src] = timer;
	timer++;
	for (auto it : adjlist[src])
	{
		if (it == parent[src])
			continue;
		if (!vis[it])
		{
			count++;
			parent[it] = src;
			dfs(it);
			low[src] = min(low[src], low[it]);
			if (parent[src] == src)
			{
				if (count > 1)
					articulationPoints.insert(src);
			}
			if (parent[src] != src && low[it] >= disc[src])
				articulationPoints.insert(src);
		}
		else
		{
			low[src] = min(low[src], disc[it]);
		}
	}

}
int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	for (int i = 0; i < 100; i++)
	{
		parent[i] = i;
		disc[i] = -1;
		low[i] = -1;
		vis[i] = false;
	}
	in(n);
	for (int i = 0; i < n; i++)
	{
		in(a); in(b);
		adjlist[a].pb(b);
		adjlist[b].pb(a);
	}
	dfs(0);
	for (auto it : articulationPoints)
		cout << it << " ";
	cout << endl;
	return 0;
}
