#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)
vector<int> L, R;
int dp[62][2][2][2];
vector<int> func(int n)
{
	int i = 0;
	vector<int> ans(62, 0);
	while (n > 0)
	{
		ans[i] = (n & 1);
		n >>= 1;
		i++;
	}
	reverse(ans.begin(), ans.end());
	return ans;
}

int solve(int index, int flag1, int flag2, int flag3)
{
	if (index == 62)
		return 0;

	if (dp[index][flag1][flag2][flag3] != -1)
		return dp[index][flag1][flag2][flag3];

	int res = 0;

	for (int i = 0; i <= 1; i++)		//upper bit
	{
		for (int j = 0; j <= 1; j++)	//lower bit
		{
			if (flag1 && i > R[index])
				continue;
			if (flag2 && j < L[index])
				continue;
			if (flag3 && j > i)
				continue;
			int pos = (i ^ j) * (1ll << (61 - index)) + solve(index + 1, flag1 & (i == R[index]), flag2 & (j == L[index]), flag3 & (i == j));
			res = max(res, pos);
		}
	}
	return dp[index][flag1][flag2][flag3] = res;

}
int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	in(l); in(r);

	L = func(l);
	R = func(r);

	memset(dp, -1, sizeof(dp));
	cout << solve(0, 1, 1, 1) << endl;

	return 0;
}
