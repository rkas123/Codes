#include<bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

using namespace std;
void print_bool(bool zeman_modnar)
{
	if (zeman_modnar)
		cout << "YES" << endl;
	else
		cout << "NO" << endl;
}
// template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key   ==> number of elements whose value is less than the given element
//find_by_order ==> kth element in the set (counting from 0)

int bonus[20][20];
int a[20];
int n, m, k;

int dp[1 << 18][20];

int setbits(int n)
{
	int ans = 0 ;
	while (n > 0)
	{
		ans++;
		n = n & (n - 1);
	}
	return ans;
}
int solve(int prev, int mask)
{
	if (setbits(mask) == m)
		return 0;

	if (dp[mask][prev] != -1)
		return dp[mask][prev];

	int res = 0;

	for (int i = 0; i < n; i++)
	{
		if ((mask & (1 << i)) == 0)
		{
			res = max(res, solve(i, mask | (1 << i)) + a[i] + bonus[prev][i]);
		}
	}
	return dp[mask][prev] = res;
}

int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	cin >> n >> m >> k;
	memset(bonus, 0 , sizeof bonus);
	memset(dp, -1, sizeof (dp));
	for (int i = 0; i < n; i++)
		cin >> a[i];

	for (int i = 0; i < k; i++)
	{
		in(x); in(y); in(c);
		x--; y--;
		bonus[x][y] = c;
	}

	cout << solve(19, 0) << endl;

	return 0;
}
