#include<bits/stdc++.h>

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"
#define segleft 2*index+1
#define segright 2*index+2

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "

const long long mod = 1e9+7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846; 

int dirX[]={1,-1,0,0};
int dirY[]={0,0,1,-1};

using namespace std;
int N=100001;           //Number of elements
bool sieve[100001];
vector<int> primes;
void makeSieve()
{
    for(int i=2;i<N;i++)
    {
        if(i&1)
        {
            sieve[i]=true;
        }
        else
        {
            sieve[i]=false;
        }
    }
    sieve[0]=sieve[1]=false;
    sieve[2]=true;
    for(int i=3;i*i<N;i++)
    {
        if(sieve[i])
        {
            for(int j=i*i;j<N;j+=(2*i))
                sieve[j]=false;
        }
    }
    for(int i=2;i<N;i++)
    {
    	if(sieve[i])
    		primes.pb(i);
    }
}
int fastexp(int a,int b)
{
    int ans=1;
    int temp=a;
    while(b>0)
    {
        if(b&1)
            ans=(ans*temp)%mod;
        temp=(temp*temp)%mod;
        b>>=1;
    }
    return ans;
}

int32_t main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    #ifndef ONLINE_JUDGE
      freopen("input.txt", "r", stdin);
      freopen("output.txt", "w", stdout);
    #endif
      makeSieve();
    in(n);
    int m[100001];
    
    for(int i=1;i<100001;i++){
    	
    	m[i]=0;
    }
    for(int i=0;i<n;i++)
    {
    	in(t);
    	for(int j=1;j*j<=t;j++)
    	{
    		if(t%j == 0)
    		{
    			m[j]++;
    			if(j!=t/j )
    				m[t/j]++;
       		}
    	}
    }
    int ans=0;
    for(int i=2;i<100001;i++)
    {
    	int count=0;
    	int t=i;
    	int mul=1;
    	for(int j=1;j*j<=t;j++)
    	{
    		if(t%j == 0)
    		{
    			if(sieve[j]){
    				mul*=j;
    				count++;
    			}
    			if(j!=t/j && sieve[t/j]){
    				mul*=(t/j);
    				count++;
    			}
    		}
    	}
    	if(i!=mul)
    		continue;
    	if(count&1)
    	{
    		ans+=(fastexp(2,m[i])-1);
    		ans%=mod;
    	}
    	else
    	{
    		ans-=(fastexp(2,m[i])-1);
    		ans+=mod;
    		ans%=mod;
    	}
    }

    ans=fastexp(2,n) - 1 - ans + mod;
    ans%=mod;
    cout<<ans<<endl;
    return 0;
}
