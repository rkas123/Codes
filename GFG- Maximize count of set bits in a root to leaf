#include<bits/stdc++.h>
#define int long long
#define uint unsigned long long
#define in(x) int x;cin>>x;
#define w(t) int t; cin>> t; while(t--)
#define Map unordered_map
#define inf 1e18
#define endl "\n"
#define MOD 1000000007
const double pi = 3.14159265358979323846;
using namespace std;
int fastexp(int a,int b)
{
    int ans=1;
    int temp=a;
    while(b>0)
    {
        if(b&1)
            ans*=(temp);
        temp*=temp;
        b>>=1;
    }
    return ans;

}   
class node{
public:
    int data;
    int count;
    node* left;
    node* right;
    node(int data)
    {
        this->data=data;
        this->count=0;
        this->left=NULL;
        this->right=NULL;
    }
};
node* create(node* &head,int data)
{
    if(data == -1){
        head=new node(-1);
        return head;
    }
    head=new node(data);
    int count=0;
    int temp=data;
    while(data>0)
    {
        count++;
        data=data&(data-1);
    }
    head->count=count;
    cout<<"left of "<<head->data<<" ";
    cin>>temp;
    head->left=create(head->left,temp);
    cout<<"right of "<<head->data<<" ";
    cin>>temp;
    head->right=create(head->right,temp);
    head->count+=max(head->left->count,head->right->count);
    return head;
}
int GCD(int a,int b)
{
    if(a==0)
        return b;
    return GCD(b%a,a);
}
void BFS(node* head)
{
    queue<node*>q;
    q.push(head);
    q.push(NULL);
    while(!q.empty())
    {
        node* front=q.front();
        q.pop();
        if(front==NULL)
        {
            cout<<endl;
            if(q.empty())
                break;
            else
                q.push(NULL);
        }
        else
        {
            cout<<front->data<<" "<<front->count<<endl;
            if(front->left != NULL)
                q.push(front->left);
            if(front->right != NULL)
                q.push(front->right);
        }

    }
}
int32_t main()
{
    // ios_base::sync_with_stdio(false);
    // cin.tie(NULL);
    // #ifndef ONLINE_JUDGE 
    //     freopen("input.txt", "r", stdin);
    //     freopen("output.txt", "w", stdout);
    // #endif
    cout<<"enter root node-> ";
    in(data);
    node* head=NULL;
    head=create(head,data);
    //BFS(head);
    cout<<head->count<<endl;
    return 0;
}
