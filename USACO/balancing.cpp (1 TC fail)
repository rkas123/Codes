/*
ID: rkrupes1
TASK: balancing
LANG: C++
*/
#include<bits/stdc++.h>

#define int long long
#define pll pair<long long,long long>

#define in(x) long long x;cin>>x
#define pb push_back
#define F first
#define S second
#define endl "\n"

#define test() int t;cin>>t;while(t--)
#define KStest() int t,t1;cin>>t;t1=t;while(t--)
#define KScout cout<<"Case #"<<t1-t<<": "
#define deb(x) cout<<#x<<" "<<x<<endl;

const long long mod = 1e9 + 7;
const int MAX = INT_MAX;
const long long inf = 1e18 + 5;
const double pi = 3.14159265358979323846;

int dirX[] = {1, -1, 0, 0};
int dirY[] = {0, 0, 1, -1};

#define cin fin
#define cout fout

#define N 1000001
using namespace std;

struct Segment_Tree {
	vector<int> segtree;
	Segment_Tree(int n) {
		segtree = vector<int>(4 * n, 0);
	}
	Segment_Tree(vector<int> &a) {
		int n = a.size();
		segtree = vector<int>(4 * n);
		build(a, 0, n - 1, 1);
	}

	int f(int a, int b) {
		//Just change this for a different segment tree
		return a + b;
	}

	void build(vector<int> &a, int s, int e, int root) {
		// base case
		if (s == e) {
			segtree[root] = a[s];
			return;
		}

		int mid = (s + e) / 2;
		build(a, s, mid, 2 * root);
		build(a, mid + 1, e, 2 * root + 1);

		// self work
		segtree[root] = f(segtree[2 * root], segtree[2 * root + 1]);
	}

	void point_update(int s, int e, int root, int idx, int val) {
		// base case
		if (s == e) {
			segtree[root] += val;
			return;
		}

		int mid = (s + e) / 2;
		if (mid >= idx) {
			point_update(s, mid, 2 * root, idx, val);
		}
		else {
			point_update(mid + 1, e, 2 * root + 1, idx, val);
		}

		// self work
		segtree[root] = f(segtree[2 * root], segtree[2 * root + 1]);
	}

	void point_update(vector<int> &a, int s, int e, int root, int idx, int val) {
		// base case
		if (s == e) {
			segtree[root] = val;
			a[idx] = val;
			return;
		}

		int mid = (s + e) / 2;
		if (mid >= idx) {
			point_update(a, s, mid, 2 * root, idx, val);
		}
		else {
			point_update(a, mid + 1, e, 2 * root + 1, idx, val);
		}

		// self work
		segtree[root] = f(segtree[2 * root], segtree[2 * root + 1]);
	}

	void point_update(int a[], int s, int e, int root, int idx, int val) {
		// base case
		if (s == e) {
			segtree[root] = val;
			a[idx] = val;
			return;
		}

		int mid = (s + e) / 2;
		if (mid >= idx) {
			point_update(a, s, mid, 2 * root, idx, val);
		}
		else {
			point_update(a, mid + 1, e, 2 * root + 1, idx, val);
		}

		// self work
		segtree[root] = f(segtree[2 * root], segtree[2 * root + 1]);
	}

	int query(int s, int e, int root, int l, int r) {  //query with root index set to 1
		// completely out of range
		if (s > r || e < l) {
			return 0;
		}
		// completely in range
		if (s >= l && e <= r) {
			return segtree[root];
		}
		// partial overlap
		int mid = (s + e) / 2;
		int x = query(s, mid, 2 * root, l, r);
		int y = query(mid + 1, e, 2 * root + 1, l, r);
		return f(x, y);
	}
};

int32_t main()
{
// 	ios_base::sync_with_stdio(false);
// 	cin.tie(NULL);
// #ifndef ONLINE_JUDGE
// 	freopen("input.txt", "r", stdin);
// 	freopen("output.txt", "w", stdout);
// #endif
	ofstream fout ("balancing.out");
	ifstream fin ("balancing.in");

	in(n);
	int ans = inf;
	vector<pll> v(n);

	Segment_Tree left(N), right(N);

	for (int i = 0; i < n; i++)
	{
		cin >> v[i].F >> v[i].S;
		right.point_update(0, N - 1, 1, v[i].S, 1);
	}

	sort(v.begin(), v.end());

	int i = 0;
	while (i < v.size())
	{
		int a = v[i].F;
		while (v[i].F == a)
		{
			left.point_update(0, N - 1, 1, v[i].S, 1);
			right.point_update(0, N - 1, 1, v[i].S, -1);
			i++;
		}

		//left part
		int s = 0, e = N;
		while (s <= e)
		{
			int mid = (s + e) / 2;
			//leftpart
			int totalleft = left.query(0, N - 1, 1, 0, N - 1);
			int lowerleft = left.query(0, N - 1, 1, 0, mid);
			int upperleft = totalleft - lowerleft;


			int totalright = right.query(0, N - 1, 1, 0, N - 1);
			int lowerright = right.query(0, N - 1, 1, 0, mid);
			int upperright = totalright - lowerright;

			ans = min(ans, max(max(lowerleft, upperleft), max(upperright, lowerright)));

			if (upperleft > lowerleft)
			{
				s = mid + 1;
			}
			else
			{
				e = mid - 1;
			}

		}



		//right part
		s = 0 , e = N;
		while (s <= e)
		{
			int mid = (s + e) / 2;
			int totalleft = left.query(0, N - 1, 1, 0, N - 1);
			int lowerleft = left.query(0, N - 1, 1, 0, mid);
			int upperleft = totalleft - lowerleft;

			//right
			int totalright = right.query(0, N - 1, 1, 0, N - 1);
			int lowerright = right.query(0, N - 1, 1, 0, mid);
			int upperright = totalright - lowerright;

			ans = min(ans, max(max(lowerleft, upperleft), max(upperright, lowerright)));

			if (upperright > lowerright)
			{
				s = mid + 1;
			}
			else
			{
				e = mid - 1;
			}

		}
	}
	cout << ans << endl;
	return 0;
}
