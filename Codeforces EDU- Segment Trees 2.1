#include<bits/stdc++.h>
#define int long long
#define uint unsigned long long
#define in(x) int x;cin>>x;
#define w(t) int t; cin>> t; while(t--)
#define Map unordered_map
#define inf 1e18
#define endl "\n"
#define MOD 1000000007
const double pi = 3.14159265358979323846;
using namespace std;
int fastexp(int a,int b)
{
    int ans=1;
    int temp=a;
    while(b>0)
    {
        if(b&1)
            ans*=(temp);
        temp*=temp;
        b>>=1;
    }
    return ans;

}
int GCD(int a,int b)
{
    if(a==0)
        return b;
    return GCD(b%a,a);
}
struct node{
    int sum;
    int pre;
    int suff;
    int seg;
};
void update(node* tree, int index, int s, int e, int i,int val)
{
    if(s>e)
        return;
    if(i>e || i<s)
        return;
    if(s==e)
    {
        tree[index].sum=val;
        tree[index].pre=max(0ll,val);
        tree[index].suff=max(0ll,val);
        tree[index].seg=max(0ll,val);
        return;
    }
    int mid=(s+e)/2;
    update(tree,2*index+1,s,mid,i,val);
    update(tree,2*index+2,mid+1,e,i,val);
    int l=2*index+1;
    int r=2*index+2;
    tree[index].pre=max(0ll,max(tree[l].pre,tree[l].sum+tree[r].pre));
    tree[index].suff=max(0ll,max(tree[r].suff,tree[r].sum+tree[l].suff));
    tree[index].sum=tree[l].sum+tree[r].sum;
    tree[index].seg=max(max(0ll,tree[l].seg),max(tree[r].seg,tree[l].suff+tree[r].pre));
}
int32_t main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    #ifndef ONLINE_JUDGE 
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif
        in(n);
        in(q);
        int size=1;
        while(size<n)
            size*=2;
        int arrsize=size;
        size*=2;
        node* tree=new node[size];
        node leaf;
        leaf.sum=0;
        leaf.pre=0;
        leaf.suff=0;
        leaf.seg=0;
        for(int i=0;i<size;i++)
            tree[i]=leaf;
        for(int i=0;i<n;i++)
        {
            in(data);
            update(tree,0,0,arrsize-1,i,data);
        }
        cout<<tree[0].seg<<endl;
        while(q--)
        {
            in(i);
            in(val);
            update(tree,0,0,arrsize-1,i,val);
            cout<<tree[0].seg<<endl;
        }
    return 0;
}
